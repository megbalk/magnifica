Fig
ml <- marrangeGrob(Fig, nrow = 4, ncol = 2)
ml #something wrong, when do it individually, they look different, but when loop they look the same...
ggsave(ml, file = "./Results/trait.interest_distribution_26June2023.png",
width = 14, height = 10, units = "cm")
#### REDUCE TO TRAITS OF INTEREST ----
trt_lg_N = c("formation", "colony.id", "zooid.id", traits)
dat_lg_N = df[intersect(colnames(df), trt_lg_N)]
head(dat_lg_N)
mean_by_formation_colony = dat_lg_N %>%
group_by(formation, colony.id) %>%
summarize(n.zooid = length(unique(zooid.id)),
avg.zh = mean(zh, na.rm = T),
avg.mpw.b = mean(mpw.b, na.rm = T),
avg.cw.m = mean(cw.m, na.rm = T),
avg.cw.d = mean(cw.d, na.rm = T),
avg.ow.m = mean(ow.m, na.rm = T),
avg.o.side = mean(o.side, na.rm = T),
avg.c.side = mean(c.side, na.rm = T),
avg.oh = mean(oh, na.rm = T)) %>%
as.data.frame()
#means of means
mean_by_formation = mean_by_formation_colony %>%
group_by(formation) %>%
summarize(n.col = length(unique(colony.id)),
avg.zh = mean(avg.zh, na.rm = T),
avg.mpw.b = mean(avg.mpw.b, na.rm = T),
avg.cw.m = mean(avg.cw.m, na.rm = T),
avg.cw.d = mean(avg.cw.d, na.rm = T),
avg.ow.m = mean(avg.ow.m, na.rm = T),
avg.o.side = mean(avg.o.side, na.rm = T),
avg.c.side = mean(avg.c.side, na.rm = T),
avg.oh = mean(avg.oh, na.rm = T)) %>%
as.data.frame()
colony_means = dat_lg_N %>%
group_by(colony.id) %>%
summarize(n.zooid = length(unique(new.id)),
avg.zh = mean(zh, na.rm = T),
avg.mpw.b = mean(mpw.b, na.rm = T),
avg.cw.m = mean(cw.m, na.rm = T),
avg.cw.d = mean(cw.d, na.rm = T),
avg.ow.m = mean(ow.m, na.rm = T),
avg.o.side = mean(o.side, na.rm = T),
avg.c.side = mean(c.side, na.rm = T),
avg.oh = mean(oh, na.rm = T)) %>%
as.data.frame()
means = dat_lg_N %>%
summarize(avg.zh = mean(zh, na.rm = T),
avg.mpw.b = mean(mpw.b, na.rm = T),
avg.cw.m = mean(cw.m, na.rm = T),
avg.cw.d = mean(cw.d, na.rm = T),
avg.ow.m = mean(ow.m, na.rm = T),
avg.o.side = mean(o.side, na.rm = T),
avg.c.side = mean(c.side, na.rm = T),
avg.oh = mean(oh, na.rm = T)) %>%
as.data.frame()
#### SCALE DATA ----
dat_lda = dat_lg_N
colnames(dat_lda)
dat_lda[, 4:11] = scale(dat_lda[, 4:11], center = F, scale = T) #just traits
data_discriminant = dat_lda
data_discriminant
head(data_discriminant)
data_plot = na.omit(data_discriminant[, 1:10]) #all rows
r3 <- lda(formula = formation ~ .,
data = data_plot[, 3:11], method = 'mle') #just traits + formation
r3 <- lda(formula = formation ~ .,
data = data_plot[, 3:11], method = 'mle') #just traits + formation
colnames(data_plot)
colnames(dat_lda)
data_plot = na.omit(data_discriminant[, 1:11]) #all rows
r3 <- lda(formula = formation ~ .,
data = data_plot[, 3:10], method = 'mle') #just traits + formation
r3 <- lda(formula = formation ~ .,
data = data_plot[, 3:11], method = 'mle') #just traits + formation
plda = predict(object = r3, # predictions
newdata = data_plot)
#proportion of the variance explained by each LD axis:
prop.lda = r3$svd^2/sum(r3$svd^2)
dataset = data.frame(formation = (data_plot)[,"formation"],
lda = plda$x)
p1 <- ggplot(dataset) +
geom_point(aes(lda.LD1, lda.LD2, color = formation),
size = 1, alpha = .75) +
labs(x = paste("LD1 (", percent(prop.lda[1]), ")", sep = ""),
y = paste("LD2 (", percent(prop.lda[2]), ")", sep = ""))
p1
head(dataset)
ggsave(p1, file = "./Results/trait_discriminant_notLog_26Jun2023.png",
width = 14, height = 10, units = "cm")
dat_lg_N
head(dat_lg_N)
mean_by_formation_colony
#### SCALE DATA ----
dat_lda = mean_by_formation_colony #dat_lg_N
colnames(dat_lda)
dat_lda[, 4:11] = scale(dat_lda[, 4:11], center = F, scale = T) #just traits
data_discriminant = dat_lda
data_plot = na.omit(data_discriminant[, 1:11]) #all rows
r3 <- lda(formula = formation ~ .,
data = data_plot[, 3:11], method = 'mle') #just traits + formation
plda = predict(object = r3, # predictions
newdata = data_plot)
colnames(data_plot)
r3 <- lda(formula = formation ~ .,
data = data_plot[, c(1, 4:11)], method = 'mle') #just traits + formation
plda = predict(object = r3, # predictions
newdata = data_plot)
#proportion of the variance explained by each LD axis:
prop.lda = r3$svd^2/sum(r3$svd^2)
dataset = data.frame(formation = (data_plot)[,"formation"],
lda = plda$x)
p1 <- ggplot(dataset) +
geom_point(aes(lda.LD1, lda.LD2, color = formation),
size = 1, alpha = .75) +
labs(x = paste("LD1 (", percent(prop.lda[1]), ")", sep = ""),
y = paste("LD2 (", percent(prop.lda[2]), ")", sep = ""))
p1
ggsave(p1, file = "./Results/trait_discriminant_colony_27Jun2023.png",
width = 14, height = 10, units = "cm")
#### G MATRIX ----
#Preparing the data
#check number of colonies NOT zooids:
col_form = split.data.frame(dat_lg_N, dat_lg_N$formation) #zooids per formation
sample_sizes = lapply(zooid_form, function(x){dim(x)[1]})
sample_sizes = lapply(col_form, function(x){dim(x)[1]})
sample_sizes
#### G MATRIX ----
#Preparing the data
#check number of colonies NOT zooids:
col_form = split.data.frame(mean_by_formation_colony, mean_by_formation_colony$formation) #zooids per formation
sample_sizes = lapply(col_form, function(x){dim(x)[1]})
enough = as.matrix(sample_sizes) > 100 #more than 100 zooids per formation
sample_sizes
enough
#enough = as.matrix(sample_sizes) > 100 #more than 100 zooids per formation
#form_final = col_form[names(enough[enough == T,])]
form_data = lapply(col_form, function(x) x[complete.cases(x),])
form_data
##### PRIORS -----
phen.var = lapply(form_data, function (x){ (cov(x[, 3:10]))}) #traits
colnames(form_data)
#### G MATRIX ----
#Preparing the data
#check number of colonies NOT zooids:
col_form = split.data.frame(mean_by_formation_colony, mean_by_formation_colony$formation) #zooids per formation
sample_sizes = lapply(col_form, function(x){dim(x)[1]})
#enough = as.matrix(sample_sizes) > 100 #more than 100 zooids per formation
#form_final = col_form[names(enough[enough == T,])]
form_data = lapply(col_form, function(x) x[complete.cases(x),])
##### PRIORS -----
phen.var = lapply(form_data, function (x){ (cov(x[, 3:10]))}) #traits
head(col_form)
##### PRIORS -----
phen.var = lapply(form_data, function (x){ (cov(x[, 4:11]))}) #traits
prior = lapply(phen.var, function (x){list(G = list(G1 = list(V = x/2, nu = 2)),
R = list(V = x/4, nu = 2))})
##### MCMC -----
#Running the MCMC chain
model_G = list()
traits
for (i in 1:1){ #length 7 because 7 formations
model_G[[i]] <- MCMCglmm(cbind(zh, mpw.b, cw.m, cw.d, #same order as traits
ow.m, oh, c.side, o.side) ~ trait-1,
#account for variation w/in colony:
random = ~us(trait):specimenNR, #the number of these determines # of Gs #+ us(trait):formation
rcov = ~us(trait):units,
family = rep("gaussian", 8), #num of traits
data = form_data[[i]],
nitt = 1500000, thin = 1000, burnin = 500000,
prior = prior[[i]], verbose = TRUE)
}
phen.var
prior
for (i in 1:1){ #length 7 because 7 formations
model_G[[i]] <- MCMCglmm(cbind(zh, mpw.b, cw.m, cw.d, #same order as traits
ow.m, oh, c.side, o.side) ~ trait-1,
#account for variation w/in colony:
random = ~us(trait):specimenNR, #the number of these determines # of Gs #+ us(trait):formation
rcov = ~us(trait):units,
family = rep("gaussian", 8), #num of traits
data = form_data[[i]],
nitt = 1500000, thin = 1000, burnin = 500000,
prior = prior[[i]], verbose = TRUE)
}
trais
traits
form_data[[1]]
prior[[1]]
model_G[[i]] <- MCMCglmm(cbind(avg.zh, avg.mpw.b, avg.cw.m, avg.cw.d, #same order as in priors
avg.ow.m, avg.c.side, avg.o.side, avg.oh) ~ trait-1,
#account for variation w/in colony:
random = ~us(trait):specimenNR, #the number of these determines # of Gs #+ us(trait):formation
rcov = ~us(trait):units,
family = rep("gaussian", 8), #num of traits
data = form_data[[i]],
nitt = 1500000, thin = 1000, burnin = 500000,
prior = prior[[i]], verbose = TRUE)
##### MCMC -----
#Running the MCMC chain
model_G = list()
for (i in 1:1){ #length 7 because 7 formations
model_G[[i]] <- MCMCglmm(cbind(avg.zh, avg.mpw.b, avg.cw.m, avg.cw.d, #same order as in priors
avg.ow.m, avg.c.side, avg.o.side, avg.oh) ~ trait-1,
#account for variation w/in colony:
random = ~us(trait):colony.id, #the number of these determines # of Gs #+ us(trait):formation
rcov = ~us(trait):units,
family = rep("gaussian", 8), #num of traits
data = form_data[[i]],
nitt = 1500000, thin = 1000, burnin = 500000,
prior = prior[[i]], verbose = TRUE)
}
form_data
colnames(dat_lg_N)
phen.var
##### PRIORS -----
phen.var = lapply(dat_lg_N, function (x){ (cov(x[, 4:11]))}) #traits of ALL; correct for colony later
colnames(dat_lg_N)
by_fom = (dat_lg_N, dat_lg_N$formation)
by_form = (dat_lg_N, dat_lg_N$formation)
by_form = split.data.frame(dat_lg_N, dat_lg_N$formation)
form_data = lapply(by_form, function(x) x[complete.cases(x),])
colnames(by_form)
by_form
colnames(dat_lg_N)
##### PRIORS -----
phen.var = lapply(form_data, function (x){ (cov(x[, 4:11]))}) #traits of ALL; correct for colony later
prior = lapply(phen.var, function (x){list(G = list(G1 = list(V = x/2, nu = 2)),
R = list(V = x/4, nu = 2))})
##### MCMC -----
#Running the MCMC chain
model_G = list()
for (i in 1:1){ #length 7 because 7 formations
model_G[[i]] <- MCMCglmm(cbind(zh, mpw.b, cw.m, cw.d, #same order as in priors
ow.m, c.side, o.side, oh) ~ trait-1,
#account for variation w/in colony:
random = ~us(trait):colony.id, #the number of these determines # of Gs #+ us(trait):formation
rcov = ~us(trait):units,
family = rep("gaussian", 8), #num of traits
data = form_data[[i]],
nitt = 1500000, thin = 1000, burnin = 500000,
prior = prior[[i]], verbose = TRUE)
}
data.list = list(model_G, dat_lg_N, form_data, mean_by_formation_colony)
save(model_G, file = "./Results/g_matrices_data_1form.RData")
summary(model_G[[1]])
##plots to see where sampling from:
plot(model_G[[1]]$VCV) #catepillar!
###### G MATRIX ------
#Retrieving G from posterior
model = model_G
data = (dat_lg_N)
ntraits = 8
Gmat = lapply(model, function (x) {
matrix(posterior.mode(x$VCV)[1:ntraits^2], ntraits, ntraits)})
colnames(mean_by_form)
colnames(data)
test = lapply(u_form, function (x){ data.matrix(x[, 4:11])}) #omit col and form
test = lapply(u_form, function (x){ data.matrix(x[, 4:11])}) #omit col and form
u_form = split(mean_by_form, mean_by_form$formation)
test = lapply(u_form, function (x){ data.matrix(x[, 4:11])}) #omit col and form
mean_by_form = setDT(na.omit(c[, 2:10]))[, lapply(.SD, mean, na.rm = F),
by = .(formation)] #omit col 1
mean_by_form = setDT(na.omit(c[, 3:11]))[, lapply(.SD, mean, na.rm = F),
by = .(formation)] #traits + formation
mean_by_form = setDT(na.omit(data[, 3:11]))[, lapply(.SD, mean, na.rm = F),
by = .(formation)] #traits + formation
u_form = split(mean_by_form, mean_by_form$formation)
colnames(u_form)
u_form
test = lapply(u_form, function (x){ data.matrix(x[, 4:11])}) #omit col and form
mean_by_form
test = lapply(u_form, function (x){ data.matrix(x[, 2:9])}) #only traits from mean_by_form
test_std = lapply(test, function (x){(as.numeric(x))%*%t(as.numeric(x))})
G_std = list()
for (i in 1:length(Gmat)){
G_std[[i]] = Gmat[[i]]/(test_std[names(form_data[i])][[1]])
}
G_std
names(G_std)=names(form_data[1:i]) #only one negative; formation 4 (Tainui)
lapply(G_std, isSymmetric)  #is.symmetric.matrix
std_variances = lapply(G_std, diag)
paste("Trait variances")
head(std_variances)
eig_variances=lapply(G_std, function (x) {eigen(x)$values})
paste("Eigenvalue variances")
head(eig_variances)
eig_percent = lapply(eig_variances, function (x) {x/sum(x)})
eig_per_mat = do.call(rbind, eig_percent)
eig_per_mat = data.frame(eig_per_mat, rownames(eig_per_mat))
eig_per = melt(eig_per_mat)
#dev.off()
PC_dist = ggplot(eig_per,
aes(x = variable, y = value,
group = rownames.eig_per_mat.,
colour = rownames.eig_per_mat.)) +
geom_line(aes(linetype = rownames.eig_per_mat.)) +
geom_point() +
xlab("Principal component rank") +
ylab("%Variation in the PC")
PC_dist #one negative; none above 1!
PC_dist
summary(model_G[[1]])
by_form
form_data
phen.var
prior
mean_by_formation_colony
head(mean_by_formation_colony)
head(dat_lg_N)
sample_sizes
#### LOAD LIBRARIES ----
library(ggplot2)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
#### LOAD LIBRARIES ----
library(ggplot2)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
#### LOAD LIBRARIES ----
library(ggplot2)
#### LOAD LIBRARIES ----
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
