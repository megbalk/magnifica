source("./Scripts/0-env.R")
df <- read.csv("Data/traits_27May2024.csv", #30Nov2023,29Sept2023.csv",
header = TRUE)
#### MANIPULATE DATA ----
traits = names(df[, c("ln.zh", "ln.mpw.b", "ln.cw.m", "ln.cw.d",
"ln.ow.m", "ln.oh", "ln.c.side", "ln.o.side")])
df$formation <- factor(df$formation,
levels = c("NKLS", "NKBS", "Tewkesbury",
"Upper Kai-Iwi", "Tainui",
"SHCSBSB", "modern"))
##### DISTRIBUTION -----
p.ln.zh <- ggplot(df) +
geom_density(aes(x = ln.zh)) +
ggtitle(paste0("Zooid height, N zooids = ", nrow(df), ", N colony = ", length(unique(df$colony.id)))) +
plot.theme +
scale_y_continuous(name = "Density") +
scale_x_continuous(expression(ln~Zooid~Height~(mu*m)))
p.ln.zh.form <- ggplot(df) +
geom_density(aes(x = ln.zh,
group = formation,
col = formation)) + #lots are bimodal
ggtitle(paste0("Distribution of traits, N zooids = ", length(unique(df$zooid.id)),
", N colony = ", length(unique(df$colony.id)))) +
plot.theme +
scale_y_continuous(name = "Density") +
scale_x_continuous(expression(ln~Zooid~Height~(mu*m)))
traits.melt <- melt(data = df,
id.vars = c("boxID", "zooid.id","image",
"colony.id", "formation"),
variable.name = "measurementType",
value.name = "measurementValue")
length(unique(traits.melt$colony.id)) #630 unique colonies
traits.stats <- traits.melt %>%
dplyr::group_by(measurementType) %>%
dplyr::summarise(avg = mean(measurementValue))
traits.stats.form <- traits.melt %>%
dplyr::group_by(measurementType, formation) %>%
dplyr::summarise(avg = mean(measurementValue))
traits.melt.trim <- traits.melt[traits.melt$measurementType %in% traits,]
p.dist <- ggplot(traits.melt.trim) +
geom_density(aes(x = measurementValue,
group = measurementType,
col = measurementType)) + #lots are bimodal
ggtitle(paste0("Distribution of traits, N zooids = ", length(unique(traits.melt$zooid.id)), ", N colony = ", length(unique(traits.melt$colony.id)))) +
plot.theme +
scale_y_continuous(name = "Density") +
scale_x_continuous(expression(ln~trait~(mu*m)))
## Find cutoff for frequencies of size bins
# frequency by size bin (quarter ln bins)
df.bins <- df %>%
mutate(zh.bin = cut(ln.zh, breaks = seq(5.5, 7.5, .1))) %>%
as.data.frame()
df.bin.f <- df.bins %>%
dplyr::group_by(zh.bin) %>%
dplyr::summarise(n = n()) %>%
as.data.frame()
View(df.bin.f)
#### FUNCTIONS ----
source("./Scripts/norm.vector.funct.R")
source("./Scripts/magnitudeFunction.R")
source("./Scripts/linearMeasurement.function.R")
#### PLOT THEME ----
#formations and colors:
#NKLS = #F8766D
#NKBS = #CD9600
#Twekesbury = #7CAE00
#Waipuru = #00BE67
#Upper Kai-Iwi = #00A9FF
#Tainui = #C77CFF
#SHCSBSB = #FF61CC
col.form = c("#F8766D", "#CD9600",  "#00BE67", #"#7CAE00"
"#00A9FF", "#C77CFF", "#FF61CC", "#00BFC4") #YES
col.traits = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67",
"#00BFC4", "#00A9FF", "#C77CFF", "#FF61CC")
col.traits.repo <- c("#F8766D", #zh
"#CD9600", #oh
"#B79F00", #ow.m
"#00BE67", #o.side
"#00C094", #mpw.b
"#619CFF", #cw.d
"#00BFC4", #cw.m
"#C77CFF") #c.side)
plot.theme <- theme(text = element_text(size = 16),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
plot.background = element_rect(fill = 'transparent', color = NA))
#pch code
# P = triangle = 17
# G = square = 15
# Global g = diamond = 18
# Temp = circle = 16
#### FORMATIONS ----
formation_transition <- c("NKLS to NKBS",
"NKBS to Tewkesbury",
"Tewkesbury to Upper Kai-Iwi",
"Upper Kai-Iwi to Tainui",
"Tainui to SHCSBSB",
"SHCSBSB to modern", "")
formation_transition <- factor(formation_transition,
levels = c("NKLS to NKBS",
"NKBS to Tewkesbury",
"Tewkesbury to Upper Kai-Iwi",
"Upper Kai-Iwi to Tainui",
"Tainui to SHCSBSB",
"SHCSBSB to modern", ""))
formation_list <- c("NKLS", "NKBS", "Tewkesbury",
"Upper Kai-Iwi", "Tainui", "SHCSBSB", "modern")
formation_list <- factor(formation_list, levels = c("NKLS", "NKBS", "Tewkesbury",
"Upper Kai-Iwi", "Tainui", "SHCSBSB", "modern"))
#### TEMPERATURE ----
form.meta <- read.csv("~/Documents/GitHub/bryozoa/stegino_metadata/newMetadata/formations.csv", header = TRUE)
#this is downloaded from: http://www.lorraine-lisiecki.com/LR04_MISboundaries.txt
oxy.18 <- read.csv("Data/∂18O.csv",
header = TRUE)
bottom = as.numeric(form.meta$Isotope_Stage_Start)
top = as.numeric(form.meta$Isotope_Stage_End)
form.meta$med.O18 <- c()
form.meta$sd.med.O18 <- c()
form.meta$n.O18 <- c()
for (i in 1:nrow(form.meta)){
temp = oxy.18$d18O[which(oxy.18$Time <= bottom[i] & oxy.18$Time >= top[i])]
form.meta$med.O18[i] = median(temp)
form.meta$sd.med.O18[i] = sd(temp)
form.meta$n.O18[i] <- length(temp)
}
#convert ot ˚C
form.meta$temp <- 16.5 - (4.3*form.meta$med.O18) + (0.14*(form.meta$med.O18^2))
#make factors
form.meta$formationCode <- factor(form.meta$formationCode,
levels = c("NKLS", "NKBS", "Tewkesbury",
"Upper Kai-Iwi", "Tainui",
"SHCSBSB", "modern"))
#write.csv(form.meta,
#          "./Results/formation.with.isotopes.csv",
#          row.names = FALSE)
## Find cutoff for frequencies of size bins
# frequency by size bin (quarter ln bins)
df.bins <- df %>%
mutate(zh.bin = cut(ln.zh, breaks = seq(5.5, 7.5, .1))) %>%
as.data.frame()
df.bin.f <- df.bins %>%
dplyr::group_by(zh.bin) %>%
dplyr::summarise(n = n()) %>%
as.data.frame()
sm.traits <- df[df$ln.zh < 6.25,]
sm.colonies <- unique(sm.traits$colony.id)
length(sm.colonies) #41; was 95 images out of 891
bins <- c("(5.5,5.6]", "(5.6,5.7]", "(5.7,5.8]",
"(5.8,5.9]", "(5.9,6]", "(6,6.1]",
"(6.1,6.2]", "(6.2,6.3]")
df.bins$zh.bin <- as.character(df.bins$zh.bin)
df.bins$sm <- FALSE
df.bins$sm[df.bins$zh.bin %in% bins] <- TRUE
#look at proportions
prop.sm <- df.bins %>%
dplyr::group_by(colony.id) %>%
dplyr::summarise(n.zooid = length(zooid.id),
n.sm.zooid = sum(sm),
prop.sm = n.sm.zooid/n.zooid)
#goes from 100% to 20%; perhaps make 20% the cut off
rm.col <- prop.sm$colony.id[prop.sm$prop.sm == 1]
length(rm.col) #31 colonies
reg.colonies <- df[!(df$colony.id %in% rm.col),]
nrow(reg.colonies) #5687
length(unique(reg.colonies$colony.id)) #557
##### ABOUT TRAITS -----
df <- reg.colonies
str(df$formation)
mean_by_formation_colony = df %>% #use this going forward
dplyr::group_by(formation, colony.id) %>%
dplyr::summarize(n.zooid = length(zooid.id),
avg.zh = mean(ln.zh, na.rm = T),
sd.zh = sd(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
sd.mpw.b = sd(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
sd.cw.m = sd(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
sd.cw.d = sd(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
sd.ow.m = sd(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
sd.oh = sd(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
sd.o.side = sd(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T),
sd.c.side = sd(ln.c.side, na.rm = T)) %>%
as.data.frame()
min(mean_by_formation_colony$n.zooid) #5
mean_by_formation = df %>%
dplyr::group_by(formation) %>%
dplyr::summarize(num.col = length(unique(colony.id)),
num.zooid = length(unique(zooid.id)),
avg.zooid = ceiling(num.zooid/num.col), #round up to nearest integer
min.zh = min(ln.zh, na.rm = T),
max.zh = max(ln.zh, na.rm = T),
avg.zh = mean(ln.zh, na.rm = T),
sd.zh = sd(ln.zh, na.rm = T),
var.zh = var(ln.zh, na.rm = T),
min.mpw.b = min(ln.mpw.b, na.rm = T),
max.mpw.b = max(ln.mpw.b, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
sd.mpw.b = sd(ln.mpw.b, na.rm = T),
var.mpw.b = var(ln.mpw.b, na.rm = T),
min.cw.m = min(ln.cw.m, na.rm = T),
max.cw.m = max(ln.cw.m, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
sd.cw.m = sd(ln.cw.m, na.rm = T),
var.cw.m = var(ln.cw.m, na.rm = T),
min.cw.d = min(ln.cw.d, na.rm = T),
max.cw.d = max(ln.cw.d, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
sd.cw.d = sd(ln.cw.d, na.rm = T),
var.cw.d = var(ln.cw.d, na.rm = T),
min.ow.m = min(ln.ow.m, na.rm = T),
max.ow.m = max(ln.ow.m, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
sd.ow.m = sd(ln.ow.m, na.rm = T),
var.ow.m = var(ln.ow.m, na.rm = T),
min.oh = min(ln.oh, na.rm = T),
max.oh = max(ln.oh, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
sd.oh = sd(ln.oh, na.rm = T),
var.oh = var(ln.oh, na.rm = T),
min.o.side = min(ln.o.side, na.rm = T),
max.o.side = max(ln.o.side, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
sd.o.side = sd(ln.o.side, na.rm = T),
var.o.side = var(ln.o.side, na.rm = T),
min.c.side = min(ln.c.side, na.rm = T),
max.c.side = max(ln.c.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T),
sd.c.side = sd(ln.c.side, na.rm = T),
var.c.side = var(ln.c.side, na.rm = T)) %>%
as.data.frame()
colony_means = df %>%
dplyr::group_by(colony.id) %>%
dplyr::summarize(formation = formation[1],
n.zooid = length(unique(zooid.id)),
avg.zh = mean(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T)) %>%
as.data.frame()
means = df %>%
dplyr::summarize(avg.zh = mean(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T)) %>%
as.data.frame()
sum.data.list = list(mean_by_formation, mean_by_formation_colony, means)
save(sum.data.list,
file = "./Results/sum.data.list.RData")
#from https://r-coder.com/correlation-plot-r/
panel.hist <- function(x, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5))
his <- hist(x, plot = FALSE)
breaks <- his$breaks
nB <- length(breaks)
y <- his$counts
y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = rgb(0, 1, 1, alpha = 0.5), ...)
# lines(density(x), col = 2, lwd = 2) # Uncomment to add density lines
}
reg.colonies %>%
group_by(colony.id) %>%
summarise(n.zoo = length(zooid.id))
reg.colonies %>%
dplyr::group_by(colony.id) %>%
summarise(n.zoo = length(zooid.id))
reg.colonies %>%
dplyr::group_by(colony.id) %>%
dplyr::summarise(n.zoo = length(zooid.id))
chk <- reg.colonies %>%
dplyr::group_by(colony.id) %>%
dplyr::summarise(n.zoo = length(zooid.id)) %>%
as.data.frame()
min(chk$n.zoo)
images.df <- read.csv("./Data/images.filtered_27May2024.csv", #images.merged_30Nov2023.csv,
header = TRUE,
sep = ",")
#### EXPLORE DATA ----
nrow(images.df) #7254
images.df$formation <- factor(images.df$formation,
levels = c("NKLS", "NKBS", "Tewkesbury",
"Upper Kai-Iwi", "Tainui",
"SHCSBSB", "modern"))
colnames(images.df)[colnames(images.df) == 'new.id'] <- 'zooid.id'
colnames(images.df)[colnames(images.df) == 'specimenNR'] <- 'colony.id'
## Zooid height (maximum height at centerline): 4 to 12
images.df$zh.px <- len.py(images.df$X4, images.df$X12,
images.df$Y4, images.df$Y12)
## Operculum height of left side: 4 to 20
images.df$oh.l.px <- len.py(images.df$X4, images.df$X20,
images.df$Y4, images.df$Y20)
## Operculum height of right side: 4 to 21
images.df$oh.r.px <- len.py(images.df$X4, images.df$X21,
images.df$Y4, images.df$Y21)
## Operculum mid-width (maximum width at centerline): 19 to 0
images.df$ow.m.px <- len.py(images.df$X19, images.df$X0,
images.df$Y19, images.df$Y0)
## Operculum base width: 21 to 20
images.df$ow.b.px <- len.py(images.df$X21, images.df$X20,
images.df$Y21, images.df$Y20)
## Operculum side length of right side: 21 to 18
images.df$o.side.r.px <- len.py(images.df$X21, images.df$X18,
images.df$Y21, images.df$Y18)
## Operculum side length of left side: 20 to 17
images.df$o.side.l.px <- len.py(images.df$X20, images.df$X17,
images.df$Y20, images.df$Y17)
## Median process base width: 5 to 6
images.df$mpw.b.px <- len.py(images.df$X5, images.df$X6,
images.df$Y5, images.df$Y6)
## Cryptocyst mid-width: 10 to 11
images.df$cw.m.px <- len.py(images.df$X10, images.df$X11,
images.df$Y10, images.df$Y11)
## Cryptocyst base width: 9 to 1
#images.df$cw.b.px <- len.py(images.df$X9, images.df$X1,
#                         images.df$Y9, images.df$Y1)
## Cryptocyst distal width: 8 to 7
images.df$cw.d.px <- len.py(images.df$X8, images.df$X7,
images.df$Y8, images.df$Y7)
## Cryptocyst side length of right side: 1 to 7
images.df$c.side.r.px <- len.py(images.df$X1, images.df$X7,
images.df$Y1, images.df$Y7)
## Cryptocyst side length of left side: 9 to 8
images.df$c.side.l.px <- len.py(images.df$X9, images.df$X8,
images.df$Y9, images.df$Y8)
## centroid size
#It is the square root of the sum of squared distances of all the
#landmarks you collected in a structure from their centroid.
##### MAKE TABLE & SCALE CORRECT -----
#For 30x it is 0.606 pixels per um(micrometer)
#all bleed are at 40x, which is 0.825 pixels per um
#the only bleed numbers included are: 686, 244, 242; form.no = BLEED
#recalculate them manually
images.df$zh <- images.df$zh.px/.606
images.df$oh.l <- images.df$oh.l.px/.606
images.df$oh.r <- images.df$oh.r.px/.606
images.df$ow.b <- images.df$ow.b.px/.606
images.df$ow.m <- images.df$ow.m.px/.606
images.df$mpw.b <- images.df$mpw.b.px/.606
images.df$cw.m <- images.df$cw.m.px/.606
images.df$cw.d <- images.df$cw.d.px/.606
images.df$c.side.r <- images.df$c.side.r.px/.606
images.df$c.side.l <- images.df$c.side.l.px/.606
images.df$o.side.r <- images.df$o.side.r.px/.606
images.df$o.side.l <- images.df$o.side.l.px/.606
images.df$zh[images.df$form.no == "BLEED"] <- images.df$zh.px[images.df$form.no == "BLEED"]/.825
images.df$oh.l[images.df$form.no == "BLEED"] <- images.df$oh.l.px[images.df$form.no == "BLEED"]/.825
images.df$oh.r[images.df$form.no == "BLEED"] <- images.df$oh.r.px[images.df$form.no == "BLEED"]/.825
images.df$ow.b[images.df$form.no == "BLEED"] <- images.df$ow.b.px[images.df$form.no == "BLEED"]/.825
images.df$ow.m[images.df$form.no == "BLEED"] <- images.df$ow.m.px[images.df$form.no == "BLEED"]/.825
images.df$mpw.b[images.df$form.no == "BLEED"] <- images.df$mpw.b.px[images.df$form.no == "BLEED"]/.825
images.df$cw.m[images.df$form.no == "BLEED"] <- images.df$cw.m.px[images.df$form.no == "BLEED"]/.825
images.df$cw.d[images.df$form.no == "BLEED"] <- images.df$cw.d.px[images.df$form.no == "BLEED"]/.825
images.df$c.side.r[images.df$form.no == "BLEED"] <- images.df$c.side.r.px[images.df$form.no == "BLEED"]/.825
images.df$c.side.l[images.df$form.no == "BLEED"] <- images.df$c.side.l.px[images.df$form.no == "BLEED"]/.825
images.df$o.side.r[images.df$form.no == "BLEED"] <- images.df$o.side.r.px[images.df$form.no == "BLEED"]/.825
images.df$o.side.l[images.df$form.no == "BLEED"] <- images.df$o.side.l.px[images.df$form.no == "BLEED"]/.825
##### CHECK FOR ASYMMETRY -----
##### TRIM TO TRAITS ONLY ----
traits.df <- images.df %>%
dplyr::select(box_id, image,
colony.id, zooid.id,
formation,
zh, oh, ow.m, ow.b,
mpw.b, cw.m, cw.d,
o.side, c.side)
colnames(traits.df)[colnames(traits.df) == 'box_id'] <- 'boxID'
##### LN TRANSFORM -----
traits.df$ln.zh <- log(traits.df$zh)
traits.df$ln.mpw.b <- log(traits.df$mpw.b)
## Operculum height
images.df$oh <- (.5/images.df$ow.b)*sqrt(images.df$ow.b+images.df$oh.r+images.df$oh.l)
##### TRIM TO TRAITS ONLY ----
traits.df <- images.df %>%
dplyr::select(box_id, image,
colony.id, zooid.id,
formation,
zh, oh, ow.m, ow.b,
mpw.b, cw.m, cw.d,
o.side, c.side)
## Operculum average side length:
images.df$o.side <- rowMeans(cbind(images.df$o.side.l, images.df$o.side.r))
## Cryptocyst average side length:
images.df$c.side <- rowMeans(cbind(images.df$c.side.l, images.df$c.side.r))
##### TRIM TO TRAITS ONLY ----
traits.df <- images.df %>%
dplyr::select(box_id, image,
colony.id, zooid.id,
formation,
zh, oh, ow.m, ow.b,
mpw.b, cw.m, cw.d,
o.side, c.side)
colnames(traits.df)[colnames(traits.df) == 'box_id'] <- 'boxID'
##### LN TRANSFORM -----
traits.df$ln.zh <- log(traits.df$zh)
traits.df$ln.mpw.b <- log(traits.df$mpw.b)
traits.df$ln.cw.m <- log(traits.df$cw.m)
traits.df$ln.cw.d <- log(traits.df$cw.d)
traits.df$ln.ow.m <- log(traits.df$ow.m)
traits.df$ln.oh <- log(traits.df$oh)
traits.df$ln.o.side <- log(traits.df$o.side)
traits.df$ln.c.side <- log(traits.df$c.side)
##### MINIMUM 5 ZOOIDS PER COLONY -----
samp.zoo <- traits.df %>%
dplyr::group_by(colony.id) %>%
dplyr::summarize(n.zooid = length(unique(zooid.id)),
formation = formation[1]) %>%
as.data.frame()
nrow(samp.zoo) #802 colonies total
too.few <- samp.zoo[samp.zoo$n.zooid < 5,]
nrow(too.few) #172 colonies to remove
table(too.few$formation)
#low samples for: Upper Kai-Iwi, Tainui, Modern
#see which ones are removed and if can't redo them
low.samp <- c("Upper Kai-Iwi", "Tainui", "modern", "NKLS", "SHCSBSB")
too.few[too.few$formation %in% low.samp,]
too.few[too.few$formation == "SHCSBSB",]
three <- samp.zoo[samp.zoo$n.zooid < 3,]
three
too.few
too.few[too.few$formation == "modern"]
too.few[too.few$formation == "modern",]
too.few[too.few$formation == "Tainui",]
nrow(too.few[too.few$formation == "Tainui",])
nrow(too.few[too.few$formation == "Upper Kai-Iwi",])
nrow(too.few[too.few$formation == "NKLS",])
nrow(too.few[too.few$formation == "SHCSBSB",])
nrow(three[three$formation == "modern",])
nrow(three[three$formation == "Tainui",])
nrow(three[three$formation == "Upper Kai-Iwi",])
nrow(three[three$formation == "NKLS",])
nrow(three[three$formation == "SHCSBBS",])
nrow(three[three$formation == "SHCSBSB",])
three[three$formation == "Upper Kai-Iwi",]
three[three$formation == "Tainui",]
three[three$formation == "modern",]
three[three$formation == "NKLS",]
three[three$formation == "SHCSBSB",]
table(unique(three$colony.id), three$formation)
three %>% group_by(formation) %>% summarise(n.col = length(unique(colony.id)))
three %>%
dplyr::group_by(formation) %>%
dplyr::summarise(n.col = length(unique(colony.id)))
#would add 10 Upper Kai-Iwi; 4 modern; and 9 Tainui; 30 to NKLS; 44 to SHCSBSB
too.few %>%
dplyr::group_by(formation) %>%
dplyr::summarise(n.col = length(unique(colony.id)))
