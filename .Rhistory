image.list <- str_split(image,
pattern = "_")
specimenNR <- c()
for(i in 1:length(image.list)){
specimenNR[i] <- paste0(image.list[[i]][1], image.list[[i]][2])
}
##### COMBINE & WRITE CSV ----
df.list <- data.frame(folder = folder,
subfolder = subfolder,
sub.subfolder = sub.subfolder,
image = image,
ext = ext,
fileName = fileName,
specimenNR = specimenNR,
stringsAsFactors = FALSE)
nrow(df.list) #3809
nrow(df.list[df.list$ext == "tif",]) #1906
df.list$formation <- ""
df.list$formation[grepl("^0", df.list$specimenNR)] <- "NKBS"
df.list$formation[grepl("^1", df.list$specimenNR)] <- "NKBS"
df.list$formation[grepl("^2", df.list$specimenNR)] <- "NKBS"
df.list$formation[grepl("^3", df.list$specimenNR)] <- "NKBS"
df.list$formation[grepl("^4", df.list$specimenNR)] <- "NKLS"
df.list$formation[grepl("^5", df.list$specimenNR)] <- "NKLS"
df.list$formation[grepl("^6", df.list$specimenNR)] <- "Tewkesbury"
df.list$formation[grepl("^7", df.list$specimenNR)] <- "SHCSBSB"
df.list$formation[grepl("^8", df.list$specimenNR)] <- "Tainui"
df.list$formation[grepl("^10", df.list$specimenNR)] <- "Upper Kai-Iwi"
df.list$formation[grepl("^11", df.list$specimenNR)] <- "Waipuru"
#write.csv(df.list,
#          "./Data/computerImageList.csv",
#          row.names = FALSE)
View(df.list)
View(df.list)
write.csv(df.list,
"./Data/computerImageList.csv",
row.names = FALSE)
## Meghan A. Balk
## meghan.balk@nhm.uio.no
## This code:
## 1) extracts file names from the zip file of Steginoporella images
## 2) creates a csv file with the information parsed
## 3) compares the files to the bryozoan metadata file
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
require(splitstackshape)
require(data.table)
#### EXTRACT FILE NAMES ----
list = list.files(path = "/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images",
full.names = TRUE,
recursive = TRUE)
## remove abstract book
list.rm <- list[!grepl("/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images/Stegs/ISME 14 ABSTRACT BOOK",
list)]
#### TXT ONLY ----
list.trim <- list.rm[!grepl("*.tif",
list.rm)]
length(list.trim) #1889
##unlist
txtPath <- unlist(list.trim)
#### READ TXT FILES ----
##practice with one file
f <- read.table("/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images/Sara/002_CV_1_15v_x30.txt",
sep = "^",
fileEncoding="UTF-16",
skip = 1)
## now make two columns, using "=" as deliminator
ff <- cSplit(f, 'V1',
sep = "=",
stripWhite = TRUE,
type.convert = FALSE)
#seems Condition is multiple "="
condition <- str_split(ff[ff$V1_1 == "Condition",],
pattern = "\ ")
av <- c("AV", gsub(".0kV", "v",condition[[3]][1]))
mag <- c(condition[[3]][2], condition[[4]][1])
wd <- c(condition[[4]][2], condition[[5]][1])
lensMode <- c(condition[[5]][2], condition[[6]][1])
path <- c("path", "/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images/Sara/002_CV_1_15v_x30.txt")
cond.paste <- paste(ff$V1_2[ff$V1_1 == "Condition"],
ff$V1_3[ff$V1_1 == "Condition"],
ff$V1_4[ff$V1_1 == "Condition"],
ff$V1_5[ff$V1_1 == "Condition"],
ff$V1_6[ff$V1_1 == "Condition"],
sep = " ")
ff2 <- ff
ff2$V1_2[ff2$V1_1 == "Condition"] <- cond.paste
ff3 <- ff2[,1:2]
ff4 <- rbind(path, as.data.frame(ff3), av, mag, wd, lensMode)
ff4$V1_1 #need to transpose
## now for all!
txt.df <- data.frame()
for(i in 1:length(txtPath)){
f <- read.table(txtPath[i],
sep = "^",
fileEncoding = "UTF-16",
skip = 1)
## now make two columns, using "=" as deliminator
ff <- cSplit(f, 'V1',
sep = "=",
stripWhite = TRUE,
type.convert = FALSE)
#seems Condition is multiple "="
condition <- str_split(ff[ff$V1_1 == "Condition",],
pattern = "\ ")
av <- c(condition[[2]][1],condition[[3]][1])
mag <- c(condition[[3]][2], condition[[4]][1])
wd <- c(condition[[4]][2], condition[[5]][1])
lensMode <- c(condition[[5]][2], condition[[6]][1])
path <- c("path", txtPath[i])
cond.paste <- paste(ff$V1_2[ff$V1_1 == "Condition"],
ff$V1_3[ff$V1_1 == "Condition"],
ff$V1_4[ff$V1_1 == "Condition"],
ff$V1_5[ff$V1_1 == "Condition"],
ff$V1_6[ff$V1_1 == "Condition"],
sep = " ")
ff2 <- ff
ff2$V1_2[ff2$V1_1 == "Condition"] <- cond.paste
ff3 <- ff2[,1:2]
ff4 <- rbind(path, as.data.frame(ff3), av, mag, wd, lensMode)
names <- ff4$V1_1
ff5 <- as.data.frame(t(ff4[,-1]))
colnames(ff5) <- names
txt.df <- rbind(txt.df, ff5)
}
nrow(files.df) #1889
nrow(txt.df) #1889
## Meghan A. Balk
## meghan.balk@nhm.uio.no
## This code:
## 1) extracts file names from the zip file of Steginoporella images
## 2) creates a csv file with the information parsed
## 3) compares the files to the bryozoan metadata file
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
require(splitstackshape)
require(data.table)
#### EXTRACT FILE NAMES ----
list = list.files(path = "/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images",
full.names = TRUE,
recursive = TRUE)
## remove abstract book
list.rm <- list[!grepl("/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images/Stegs/ISME 14 ABSTRACT BOOK",
list)]
#### TXT ONLY ----
list.trim <- list.rm[!grepl("*.tif",
list.rm)]
length(list.trim) #1889
##unlist
txtPath <- unlist(list.trim)
#### READ TXT FILES ----
##practice with one file
f <- read.table("/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images/Sara/002_CV_1_15v_x30.txt",
sep = "^",
fileEncoding="UTF-16",
skip = 1)
## now make two columns, using "=" as deliminator
ff <- cSplit(f, 'V1',
sep = "=",
stripWhite = TRUE,
type.convert = FALSE)
#seems Condition is multiple "="
condition <- str_split(ff[ff$V1_1 == "Condition",],
pattern = "\ ")
av <- c("AV", gsub(".0kV", "v",condition[[3]][1]))
mag <- c(condition[[3]][2], condition[[4]][1])
wd <- c(condition[[4]][2], condition[[5]][1])
lensMode <- c(condition[[5]][2], condition[[6]][1])
path <- c("path", "/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/Stegino images/Sara/002_CV_1_15v_x30.txt")
cond.paste <- paste(ff$V1_2[ff$V1_1 == "Condition"],
ff$V1_3[ff$V1_1 == "Condition"],
ff$V1_4[ff$V1_1 == "Condition"],
ff$V1_5[ff$V1_1 == "Condition"],
ff$V1_6[ff$V1_1 == "Condition"],
sep = " ")
ff2 <- ff
ff2$V1_2[ff2$V1_1 == "Condition"] <- cond.paste
ff3 <- ff2[,1:2]
ff4 <- rbind(path, as.data.frame(ff3), av, mag, wd, lensMode)
ff4$V1_1 #need to transpose
## now for all!
txt.df <- data.frame()
for(i in 1:length(txtPath)){
f <- read.table(txtPath[i],
sep = "^",
fileEncoding = "UTF-16",
skip = 1)
## now make two columns, using "=" as deliminator
ff <- cSplit(f, 'V1',
sep = "=",
stripWhite = TRUE,
type.convert = FALSE)
#seems Condition is multiple "="
condition <- str_split(ff[ff$V1_1 == "Condition",],
pattern = "\ ")
av <- c(condition[[2]][1],condition[[3]][1])
mag <- c(condition[[3]][2], condition[[4]][1])
wd <- c(condition[[4]][2], condition[[5]][1])
lensMode <- c(condition[[5]][2], condition[[6]][1])
path <- c("path", txtPath[i])
cond.paste <- paste(ff$V1_2[ff$V1_1 == "Condition"],
ff$V1_3[ff$V1_1 == "Condition"],
ff$V1_4[ff$V1_1 == "Condition"],
ff$V1_5[ff$V1_1 == "Condition"],
ff$V1_6[ff$V1_1 == "Condition"],
sep = " ")
ff2 <- ff
ff2$V1_2[ff2$V1_1 == "Condition"] <- cond.paste
ff3 <- ff2[,1:2]
ff4 <- rbind(path, as.data.frame(ff3), av, mag, wd, lensMode)
names <- ff4$V1_1
ff5 <- as.data.frame(t(ff4[,-1]))
colnames(ff5) <- names
txt.df <- rbind(txt.df, ff5)
}
nrow(txt.df) #1889
txt.df$fileName <- basename(txt.df$path)
txt.df$image <- str_extract(txt.df$fileName, pattern = "[^.]+")
image.parse <- str_split(txt.df$image,
pattern = "_")
txt.df$specimenNR <- ""
for(i in 1:nrow(txt.df)){
txt.df$specimenNR[i] <- paste0(image.parse[[i]][1], image.parse[[i]][2])
}
#write.csv(files.df,
#          "./Data/txt_metadata.csv",
#          row.names = FALSE)
View(txt.df)
colnames(txt.df)
write.csv(txt.df,
"./Data/txt_metadata.csv",
row.names = FALSE)
## Meghan A. Balk
## meghan.balk@nhm.uio.no
## This code:
## 1) extracts file names from the folder of Steginoporella images from the lab computer
## 2) creates a csv file with the information parsed
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
#### EXTRACT FILE NAMES ----
##https://stackoverflow.com/questions/54510134/getting-list-of-file-names-in-a-directory
# To list all files of a folder in a list variable including files
# from sub-folders. The code below gets the full path of files not just names.
#list = list.files(path = full_path_to_directory ,full.names=TRUE,recursive=TRUE)
# To get names of all files from their corresponding paths in all_names variable.
#all_names = basename(list)
# To write all_names variable to a CSV file.
#write.csv(all_names, "test.csv")
## get folder names
list = list.files(path = "/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/from lab computer",
full.names = TRUE,
recursive = TRUE)
length(list) #3809
#### CREATE CSV ----
path <- unlist(list)
length(path) #3809
##### PARSE FILE NAMES -----
#first folder is either Sara (folder name Sara) or Mali (folder names Stegs and Stegs2)
#subfolder folder, when given, is the formation or grouping
list.trim <- gsub(list,
pattern = "/Users/mab/Library/CloudStorage/Dropbox/Rocks-Paradox/Bryozoans/from lab computer/",
replacement = "")
list.parse <- str_split(list.trim,
pattern = "/")
folder <- c()
subfolder <- c()
sub.subfolder <- c()
fileName <- c()
ext <- c()
for(i in 1:length(list.parse)){
folder[i] <- list.parse[[i]][1]
if(isTRUE(endsWith(list.parse[[i]][2], ".txt"))){
fileName[i] <- list.parse[[i]][2]
subfolder[i] <- "NONE"
sub.subfolder[i] <- "NONE"
}
else if(isTRUE(endsWith(list.parse[[i]][2], ".tif"))){
fileName[i] <- list.parse[[i]][2]
subfolder[i] <- "NONE"
sub.subfolder[i] <- "NONE"
}
else{
subfolder[i] <- list.parse[[i]][2]
}
if(isTRUE(endsWith(list.parse[[i]][3], ".txt"))){
fileName[i] <- list.parse[[i]][3]
sub.subfolder[i] <- "NONE"
}
else if(isTRUE(endsWith(list.parse[[i]][3], ".tif"))){
fileName[i] <- list.parse[[i]][3]
sub.subfolder[i] <- "NONE"
}
else{
sub.subfolder[i] <- list.parse[[i]][3]
}
if(isTRUE(endsWith(list.parse[[i]][4], ".txt"))){
fileName[i] <- list.parse[[i]][4]
}
else if(isTRUE(endsWith(list.parse[[i]][4], ".tif"))){
fileName[i] <- list.parse[[i]][4]
}
if(isTRUE(endsWith(fileName[i], ".txt"))){
ext[i] <- "txt"
}
else{
ext[i] <- "tif"
}
}
##### PARSE IMAGE NAME -----
image <- str_extract(fileName, pattern = "[^.]+")
image.list <- str_split(image,
pattern = "_")
specimenNR <- c()
for(i in 1:length(image.list)){
specimenNR[i] <- paste0(image.list[[i]][1], image.list[[i]][2])
}
##### COMBINE & WRITE CSV ----
df.list <- data.frame(folder = folder,
subfolder = subfolder,
sub.subfolder = sub.subfolder,
image = image,
ext = ext,
fileName = fileName,
specimenNR = specimenNR,
stringsAsFactors = FALSE)
nrow(df.list) #3809
nrow(df.list[df.list$ext == "tif",]) #1906
#write.csv(df.list,
#          "./Data/computerImageList.csv",
#          row.names = FALSE)
colnames(df.list)
write.csv(df.list,
"./Data/computerImageList.csv",
row.names = FALSE)
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
df.list <- read.table("./Data/imageList.csv",
header = TRUE,
sep = ";")
df.list <- read.table("./Data/imageList.csv",
header = TRUE,
sep = ";")
txt.df <- read.table("./Data/txt_metadata.csv",
header = TRUE,
sep = ";")
df.list$fileName[1]
##fileNames should match
#to test see how many dupes
nrow(df.list[!duplicated(df.list$image),])
##fileNames should match
#to test see how many dupes
nrow(df.list)
3779/2
nrow(df.list[df.list$ext == "tif",]) #3779
## make df for just images
df.images <- df.list[df.list$ext == "tif",]
length(setdiff(df.images$fileName, files.df$ImageName)) #49
length(setdiff(df.images$fileName, txt.df$ImageName)) #49
length(setdiff(txt.df$ImageName, df.images$fileName)) #39
##double check no differences in txt file names
df.list.txt <- df.list[df.list$ext == "txt",]
setdiff(df.txt$fileName, files.df$fileName)
setdiff(df.list.txt$fileName, txt.df$fileName)
setdiff(txt.df$fileName, df.list.txt$fileName)
df.list <- read.table("./Data/imageList.csv",
header = TRUE,
sep = ";")
txt.df <- read.table("./Data/txt_metadata.csv",
header = TRUE,
sep = ";")
##fileNames should match
#to test see how many dupes
nrow(df.list) #3779
nrow(df.list[!duplicated(df.list$image),]) #1889; about half, may be one mismatch
nrow(txt.df) #1889
nrow(df.list[df.list$ext == "tif",]) #1890; seems one extra image
## make df for just images
df.images <- df.list[df.list$ext == "tif",]
length(setdiff(df.images$fileName, txt.df$ImageName)) #49
length(setdiff(txt.df$ImageName, df.images$fileName)) #39
df.image.meta <- merge(df.images, txt.df,
by = "fileName",
all.x = TRUE, all.y = TRUE) #1938
nrow(df.image.meta)
df.image.meta <- merge(df.images, txt.df,
by = "image",
all.x = TRUE, all.y = TRUE) #1938
nrow(df.image.meta)
colnames(df.image.meta) <- gsub('.x', '.tif')
colnames(df.image.meta) <- gsub('.y', '.txt')
colnames(df.image.meta) <- gsub('.y', '.txt', colnames(df.image.meta))
colnames(df.image.meta) <- gsub('.x', '.tif', colnames(df.image.meta))
colnames(df.image.meta)
df.image.meta <- merge(df.images, txt.df,
by = "image",
all.x = TRUE, all.y = TRUE) #1892
colnames(df.image.meta)
colnames(df.image.meta) <- gsub('.x', '.tif', names(df.image.meta))
colnames(df.image.meta) <- gsub('.y', '.txt', names(df.image.meta))
colnames(df.image.meta)
df.image.meta$fileName.tif == df.image.meta$ImageName
## make check in ImageName matches fileName
df.image.meta$ImageNameCheck <- df.image.meta$fileName.tif == df.image.meta$ImageName
df.image.meta$ImageNameCheck
## make check for AV and mag
# extract numbers only from AV and mag
df.image.meta$specimenNR.tif
## make check for AV and mag
# extract numbers only from AV and mag
df.image.meta$image
image.list <- str_split(df.image.meta$image,
pattern = "_")
image.list
AV.fileName <- c()
mag.fileName <- c()
as.numeric(gsub("\\D", "", image.list[[1]][4]))
as.numeric(gsub("\\D", "", image.list[[1]][5]))
head(df.image.meta)
image.list <- str_split(df.image.meta$image,
pattern = "_")
df.image.meta$AV.fileName <- ""
df.image.meta$mag.fileName <- ""
for(i in 1:length(image.list)){
df.image.meta$AV.fileName[i] <- as.numeric(gsub("\\D", "", image.list[[i]][4]))
df.image.meta$mag.fileName[i] <- as.numeric(gsub("\\D", "", image.list[[i]][5]))
}
df.image.meta$AV.fileName
df.image.meta$mag.fileName
str(df.image.meta$mag.fileName)
df.image.meta$magCheck <- df.image.meta$mag.fileName == as.numeric(gsub("\\D", "", df.image.meta$Mag))
df.image.meta$magCheck
head(df.image.meta$Vacc)
as.integer(gsub("\\D", "", df.image.meta$Vacc))
df.image.meta$AVCheck <- df.image.meta$AV.fileName == as.integer(gsub("\\D", "", df.image.meta$Vacc))
df.image.meta$AVCheck
df.image.meta$AVCheck <- as.integer(df.image.meta$AV.fileName) == as.integer(gsub("\\D", "", df.image.meta$Vacc))
df.image.meta$AVCheck
as.integer(df.image.meta$AV.fileName)
as.integer(gsub("\\D", "", df.image.meta$Vacc))
as.numeric(gsub("\\D", "", df.image.meta$Vacc))
df.image.meta$Vacc
gsub("\\D", "", df.image.meta$Vacc)
(as.numeric(gsub("\\D", "", df.image.meta$Vacc))/10)
df.image.meta$AVCheck <- as.integer(df.image.meta$AV.fileName) == (as.numeric(gsub("\\D", "", df.image.meta$Vacc))/10)
df.image.meta$AVCheck
## Meghan A. Balk
## meghan.balk@nhm.uio.no
## This code adds the output from txtFiles to the output from imageFiles
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
#### LOAD DATA ----
df.list <- read.table("./Data/imageList.csv",
header = TRUE,
sep = ";")
txt.df <- read.table("./Data/txt_metadata.csv",
header = TRUE,
sep = ";")
#### COMBINE DATA ----
##### CREATE SHARED FILE NAME -----
##match tif file to txt file
##assume all tif have associated txt file
##fileNames should match
#to test see how many dupes
nrow(df.list) #3779
nrow(df.list[!duplicated(df.list$image),]) #1889; about half, may be one mismatch
nrow(txt.df) #1889
nrow(df.list[df.list$ext == "tif",]) #1890; seems one extra image
## make df for just images
df.images <- df.list[df.list$ext == "tif",]
length(setdiff(df.images$fileName, txt.df$ImageName)) #49
length(setdiff(txt.df$ImageName, df.images$fileName)) #39
df.image.meta <- merge(df.images, txt.df,
by = "image",
all.x = TRUE, all.y = TRUE) #1892
colnames(df.image.meta) <- gsub('.x', '.tif', names(df.image.meta))
colnames(df.image.meta) <- gsub('.y', '.txt', names(df.image.meta))
## make check in ImageName matches fileName
df.image.meta$ImageNameCheck <- df.image.meta$fileName.tif == df.image.meta$ImageName
#check for false
## make check for AV and mag
# extract numbers only from AV and mag
image.list <- str_split(df.image.meta$image,
pattern = "_")
df.image.meta$AV.fileName <- ""
df.image.meta$mag.fileName <- ""
for(i in 1:length(image.list)){
df.image.meta$AV.fileName[i] <- as.numeric(gsub("\\D", "", image.list[[i]][4]))
df.image.meta$mag.fileName[i] <- as.numeric(gsub("\\D", "", image.list[[i]][5]))
}
df.image.meta$magCheck <- df.image.meta$mag.fileName == as.numeric(gsub("\\D", "", df.image.meta$Mag))
#check for false
df.image.meta$AVCheck <- as.integer(df.image.meta$AV.fileName) == (as.numeric(gsub("\\D", "", df.image.meta$Vacc))/10)
#check for false
##double check no differences in txt file names
df.list.txt <- df.list[df.list$ext == "txt",]
setdiff(df.list.txt$fileName, txt.df$fileName)
setdiff(txt.df$fileName, df.list.txt$fileName)
# no difference in txt files
write.csv(df.image.meta,
"./Data/image_merge_txt.csv",
row.names = FALSE)
## RECONCILE MANUALLY ##
# standardize "v" in AV to be lowercase
# standardize four numbers
# standardize everything before ext is separated by "_"
# standardize all AV have 2 digits
# standardize all fileName to have BSE
