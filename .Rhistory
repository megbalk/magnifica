panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum Height Right Side (pixels)") +
scale_x_continuous(name = "Operculum Height Left Side (pixels)")
p.oh.rl
oh.model <- lmodel2(formula = oh.r ~ oh.l,
data = traits.df,
range.x = "relative",
range.y = "relative")
oh.model$regression.results #slope = 1, no asymmetry
ggplot(data = traits.df) +
geom_smooth(aes(x = zh, y = ow.m), method = "lm") +
geom_point(aes(x = zh, y = ow.m)) + #two clusters
ggtitle("Scaling of operculum mid-width with zooid height, N = 16924") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum mid-width (pixels)") +
scale_x_continuous(name = "Zooid height (pixels)")
oh.zh <- ggplot(data = traits.df) +
geom_smooth(aes(x = zh, y = ow.m), method = "lm") +
geom_point(aes(x = zh, y = ow.m)) + #two clusters
ggtitle("Scaling of operculum mid-width with zooid height, N = 16924") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum mid-width (pixels)") +
scale_x_continuous(name = "Zooid height (pixels)")
slice_max(traits.df, n = 2, order_by = ow.m)
slice_max(traits.df, n = 2, order_by = zh)
max(traits.df$zh)
zh.owm.model <- lm(ow.m ~ zh,
data = traits.df)
zh.owm.model
p.zh.form
ggsave(p.zh.mag, file = "./Results/zooid_height_by_magnification.png", width = 14, height = 10, units = "cm")
ggsave(p.zh.form, file = "./Results/zooid_height_by_formation.png", width = 14, height = 10, units = "cm")
ow.zh <- ggplot(data = traits.df) +
geom_smooth(aes(x = zh, y = ow.m), method = "lm") +
geom_point(aes(x = zh, y = ow.m)) + #two clusters
ggtitle("Scaling of operculum mid-width with zooid height, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum mid-width (pixels)") +
scale_x_continuous(name = "Zooid height (pixels)")
###### TWO CLUSTERS -----
## are the two clusters driven by formation? - NO
ggplot(data = traits.df) +
geom_smooth(aes(x = zh, y = ow.m), method = "lm") +
geom_point(aes(x = zh, y = ow.m,
group = formation,
col = formation)) + #two clusters
ggtitle("Scaling of operculum mid-width with zooid height, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum mid-width (pixels)") +
scale_x_continuous(name = "Zooid height (pixels)")
## are they driven by differences in magnification? - NO
ggplot(data = traits.df) +
geom_smooth(aes(x = zh, y = ow.m), method = "lm") +
geom_point(aes(x = zh, y = ow.m,
group = magnification,
col = magnification,
alpha = .3)) + #two clusters
ggtitle("Scaling of operculum mid-width with zooid height, N zooids = 18890, N colony = 891") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
scale_y_continuous(name = "Operculum mid-width (pixels)") +
scale_x_continuous(name = "Zooid height (pixels)")
write.csv(sm.traits,
"small_bimodal_hump.csv",
row.names = FALSE)
write.csv(sm.traits,
"./Results/small_bimodal_hump.csv",
row.names = FALSE)
#### LOAD PACKAGES ----
require(stringr)
require(dplyr)
require(ggplot2)
require(reshape2)
require(lmodel2)
require(tidyverse)
#### LOAD DATA ----
output <- read.csv("./Data/output_21Apr2023_Stegniator.csv", header = TRUE)
#AP_images <- read.csv("./Data/images_from_AP.csv", header = TRUE)
bryo.meta <- read.csv("./Data/image_merge_txt_usingfileName_DONE_17Apr2023.csv",
header = TRUE,
sep = ";")
nrow(bryo.meta) #1890
nrow(output) #19346
colnames(output)
output$id[1]
output$fileName <- gsub("/media/voje-lab/bryozoa/imaging/Stegino_images/combined/",
"",
output$id)
output$image <- gsub(".tif",
"",
output$fileName)
zz <- output[duplicated(output$box_id),]
nrow(zz) #19
outoput$new.id <- paste0(output$box_id, "_", output$image)
output$new.id <- paste0(output$box_id, "_", output$image)
xx <- output[duplicated(output$new.id),]
nrow(xx)
bryo.meta.trim <- bryo.meta %>%
select(newFileName, newImage, newSpecimenNR,
image, fileName.tif, path.tif, specimenNR.tif,
Enterer, NOTES, formation, Mag)
bryo.meta.trim$imageName <- gsub(".tif", "",
bryo.meta.trim$fileName.tif)
meta.images <- merge(output, bryo.meta.trim,
by.x = "image", by.y = "imageName",
all.x = TRUE, all.y = FALSE)
nrow(meta.images) #19346
write.csv(meta.images,
"./Data/meta.images.csv",
row.names = FALSE)
library(ggplot2)
library(data.table)
library(evolqg)
library(dplyr)
library(nse)
library(grid)
library(gridBase)
library(gridExtra)
library(MCMCglmm)
library(corrplot)
library(MASS)
library(reshape2)
library(scatterplot3d)
library(rgl)
library(scales)
library(RColorBrewer)
library(coin)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = FALSE)
library(ggplot2)
library(data.table)
library(evolqg)
library(dplyr)
library(nse)
library(grid)
library(gridBase)
library(gridExtra)
library(MCMCglmm)
library(corrplot)
library(MASS)
library(reshape2)
library(scatterplot3d)
library(rgl)
library(scales)
library(RColorBrewer)
library(coin)
in_data<-read.table("chet_dat_rm.txt", header=TRUE,stringsAsFactors = F)
head(in_data)
in_age<-read.table("chet_age.txt", header=TRUE,stringsAsFactors = F)
colnames(in_age)=c("age","COL","SP")
head(in_age)
View(in_data)
View(in_age)
#Merge data sp by age
indat=merge(in_data,in_age,by="COL")
#Extract unique elements and trait names
colony_list<-unique(in_data$COL)
length(colony_list)
species_list<-unique(in_data$SP)
length(species_list)
traits=names(indat[,4:52])
colNums <- match(c(traits,"COL"),names(indat))
indat=as.data.frame(indat)
Fig <- list ()
for (i in 1:length(traits)){
trt=traits[i]
range_bin=c(min(indat[,3+i],na.rm = T),max(indat[,3+i],na.rm = T))
Fig[[i]] = ggplot(data=indat,aes_string(x=trt,fill="SP.x"))+
geom_histogram(position="identity",binwidth = (range_bin[2]-range_bin[1])/30)+
theme(legend.position="none",text = element_text(size=20))
rm(range_bin)
}
ml <- marrangeGrob(Fig, nrow=7, ncol=7)
ml
View(indat)
Fig <- list ()
for (i in 1:length(traits)){
trt=traits[i]
range_bin=c(min(indat[,3+i],na.rm = T),max(indat[,3+i],na.rm = T))
Fig[[i]] = ggplot(data=indat,aes_string(x=trt,fill="SP.x"))+
geom_histogram(position="identity",binwidth = (range_bin[2]-range_bin[1])/30)+
theme(legend.position="none",text = element_text(size=20))
rm(range_bin)
}
ml <- marrangeGrob(Fig, nrow=7, ncol=7)
ml
ml
trt_lg_N=c("COL","SP.x","age","LZ","WZ","LO","WO","LD","LAVS", "LAVL","NUMA")
dat_lg_N=indat[ intersect(colnames(indat), trt_lg_N)]
head(dat_lg_N)
mean_by_age=setDT(na.omit(dat_lg_N))[, lapply(.SD, mean(na.rm=F)), by = .(SP.x,age)]
mean_by_age=setDT(na.omit(dat_lg_N))[, lapply(.SD, mean(na.rm=F)), by = .(SP.x,age)]
mean_by_age=setDT(na.omit(dat_lg_N))[dat_lg_N, lapply(.SD, mean(na.rm=F)), by = .(SP.x,age)]
require(data.table)
setDT(na.omit(dat_lg_N))
x <- setDT(na.omit(dat_lg_N))
x
x[[, lapply(.SD, mean(na.rm=F)), by = .(SP.x,age)]]
x[, lapply(.SD, mean(na.rm=F)), by = .(SP.x,age)]
x[, lapply(.SD, na.rm=F), by = .(SP.x,age)]
x[, lapply(.SD, mean(,na.rm=F)), by = .(SP.x,age)]
x[, lapply(.SD, mean(), na.rm = FALSE), by = .(SP.x,age)]
x[, lapply(.SD, mean), by = .(SP.x,age)]
x[, lapply(.SD, mean, na.rm = FALSE), by = .(SP.x,age)]
xx <- x[, lapply(.SD, mean), by = .(SP.x,age)]
yy <- x[, lapply(.SD, mean, na.rm = FALSE), by = .(SP.x,age)]
head(xx)
head(yy)
xx
yy
mean_by_age=setDT(na.omit(dat_lg_N))[, lapply(.SD, mean, na.rm=F), by = .(SP.x,age)]
head(mean_by_age[order(mean_by_age$SP.x)])
colony_means=setDT(na.omit(dat_lg_N))[, lapply(.SD, mean, na.rm=F), by = .(SP.x,COL)]
head(colony_means[order(colony_means$SP.x)])
sp_mean=setDT(na.omit(dat_lg_N))[, lapply(.SD, mean, na.rm=F), by = .(SP.x)]
head(sp_mean[order(sp_mean$SP.x)])
head(mean_by_age[order(mean_by_age$SP.x)])
mean, na.rm=F
head(mean_by_age[order(mean_by_age$SP.x)])
head(colony_means[order(colony_means$SP.x)])
head(sp_mean[order(sp_mean$SP.x)])
dat_lda=dat_lg_N
dat_lda[,3:10]=scale(dat_lda[,3:10],center=F,scale=T)
data_discriminant=dat_lda
#Selecting the species that are present in Cheetham's Figure for comparison.
data_discriminant=data_discriminant[data_discriminant$SP.x=='auric'|
data_discriminant$SP.x=='lacry'|
data_discriminant$SP.x=='nsp09'|
data_discriminant$SP.x=='nsp10'|
data_discriminant$SP.x=='coll'|
data_discriminant$SP.x=='nsp03'|
data_discriminant$SP.x=='nsp04',]
data_plot=na.omit(data_discriminant[,1:10])
r3 <- lda(formula = SP.x ~ .,
data = data_plot[,2:10], method='mle')
plda = predict(object = r3, # predictions
newdata = data_plot)
prop.lda = r3$svd^2/sum(r3$svd^2) #proportion of the variance explained by each LD axis
dataset = data.frame(species = (data_plot)[,"SP.x"],
lda = plda$x)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, color = species), size = 4) +
labs(x = paste("LD1 (", percent(prop.lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop.lda[2]), ")", sep=""))
data_discriminant
data_plot=na.omit(data_discriminant[,1:10])
r3
plda
prop.lda
p1
p1
prop.lda = r3$svd^2/sum(r3$svd^2) #proportion of the variance explained by each LD axis
prop.lda
dataset = data.frame(species = (data_plot)[,"SP.x"],
lda = plda$x)
p1 <- ggplot(dataset) + geom_point(aes(lda.LD1, lda.LD2, color = species), size = 4) +
labs(x = paste("LD1 (", percent(prop.lda[1]), ")", sep=""),
y = paste("LD2 (", percent(prop.lda[2]), ")", sep=""))
p1
plda_all=predict(object = r3, # predictions
newdata =na.omit(data_discriminant)[,3:10] )
dat_ld=data.frame(as.data.frame(plda_all$x),na.omit(data_discriminant)$age,
na.omit(data_discriminant)$SP.x)
colnames(dat_ld)[7:8]=c("Age", "SP")
ld_by_age=setDT(dat_ld)[, lapply(.SD, mean(na.rm=T)), by = .(Age,SP)]
ld_sort=ld_by_age[order(Age),]
ld_by_age=setDT(dat_ld)[, lapply(.SD, mean, na.rm = TRUE), by = .(Age,SP)]
ld_by_age
ld_by_age
ld_sort=ld_by_age[order(Age),]
split_sp_LD=dlply(ld_sort, .(SP))
pairing_sp=lapply(split_sp_LD, function(x) { cbind(x[-nrow(x),],x[-1,])})
listNames=c("Age","SP","LD1","LD2","LD3","LD4","LD5",
"LD6","Age.1","SP.1","LD1.1","LD2.1",
"LD3.1","LD4.1","LD5.1","LD6.1")
pairing_sp=lapply(pairing_sp, setNames, listNames)
combined_ready=do.call(rbind, pairing_sp)
combined_ready=combined_ready[order(combined_ready$Age),]
ld_sort=subset(ld_sort,ld_sort$SP%in%combined_ready$SP)
#Phylomorphospace
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
pal=getPalette(13)[3:13]
s3d=scatterplot3d(ld_sort$LD1,ld_sort$LD2,-ld_sort$Age,type="p",
color = getPalette(13)[as.integer(factor(ld_sort$SP))], pch=20,
main="Phylomorphospace",
xlab="LD1",
ylab="LD2",
zlab="Age", angle=30)
s3d
orig <- s3d$xyz.convert(combined_ready$LD1,
combined_ready$LD2,
-combined_ready$Age)
plane <- s3d$xyz.convert(combined_ready$LD1.1,
combined_ready$LD2.1,
-combined_ready$Age.1)
segments(orig$x, orig$y, plane$x,plane$y,
getPalette(13)[as.integer(factor(combined_ready$SP))],lwd=1)
#Rotatable Phylomophospace
plot3d(ld_sort$LD1, ld_sort$LD2, -ld_sort$Age,
col=getPalette(13)[as.integer(factor(ld_sort$SP))],
size=1.3,type='s', xlab='LD1',ylab='LD2',zlab='Time')
segments3d(x=as.vector(t(combined_ready[,c(3,11)])),
y=as.vector(t(combined_ready[,c(4,12)])),
z=-as.vector(t(combined_ready[,c(1,9)])),  col=getPalette(13)[as.integer(factor(rep(combined_ready$SP,each=2)))],lwd=2)
#selecting branching points and ancestor descendants
old=data.frame(mean_by_age$age,mean_by_age$SP.x)
old=old[complete.cases(old),]
colnames(old)=c("Age","SP")
time=split(old$Age,old$SP)
timesorted=lapply(time,sort)
time_diff=lapply(timesorted,diff)
time_vec=as.data.frame(unlist(time_diff))
# Distribution of time intervals
Fig_time <- ggplot(time_vec, aes(x=time_vec)) +
geom_histogram(color="darkblue", fill="lightblue") +
xlab("Time intervals (Myr)")
Fig_time
n
# Anagenetic species differences standardized by ancestral mean
lineage= function (x,STD=T) {
split_data=split.data.frame(x,x$SP.x)
age_sorted=lapply(split_data, function(u) {u[order(u$age),]})
if (STD==T){
std_change=lapply(age_sorted, function (y){
-diff(as.matrix(y[,4:11]))/as.matrix(y[-1,4:11])
})}
else {
std_change=lapply(age_sorted, function (y){
-diff(as.matrix(y[,4:11]))
})}
std_change
}
results_mean=lineage(mean_by_age,STD=T)
res_abs=lapply(results_mean, abs)
deltazmi_vect_trait=unlist(res_abs)
deltazmi.norm <- lapply(results_mean, function(x){colSums(t(x)^2)^0.5})
deltazmi_vect=unlist(deltazmi.norm)/(8^0.5)
Fig_deltaz.ana <- ggplot(as.data.frame(deltazmi_vect_trait),
aes(x=deltazmi_vect_trait)) +
geom_histogram(color="darkblue", fill="lightblue") +xlab("DeltaZ (%mean)")
grid.arrange(Fig_deltaz.ana,nrow=1,ncol=1)
Fig_deltaz.ana
Fig_deltaz.ana
rel_time_morph=data.frame(deltazmi_vect,time_vec)
names(rel_time_morph)=c("deltaz","time")
Fig_rate_ana=ggplot(rel_time_morph, aes(deltaz/time))+
geom_histogram(color="darkblue", fill="lightblue")+
xlab("Rate of Evolution (%change in Mean/Myr)")
Fig_rate_ana
Fig_rate_ana
split_data_clado=split.data.frame(mean_by_age,mean_by_age$SP.x)
age_sorted_clado=lapply(split_data_clado, function(u) {u[order(u$age),]})
clado_morph_change=function (ancestor,descendant, dataframe){
anc_matrix=dataframe[names(dataframe)==ancestor][[1]]
desc_matrix=dataframe[names(dataframe)==descendant][[1]]
if (max(anc_matrix$age)<=max(desc_matrix$age)){
print('The descendant species is older or, at least, as old as the ancestral')
}
else{
desc_value=desc_matrix[nrow(desc_matrix)][,4:11]
anc_values=anc_matrix[anc_matrix$age>
max(desc_matrix$age[nrow(desc_matrix)])][,4:11]
std_diff=-sweep(as.matrix(anc_values),2,
as.matrix(desc_value))/as.matrix(anc_values)
std_diff_multi=colSums(t(std_diff)^2)^0.5
std_diff_multi}
}
clado_time=function (ancestor,descendant, dataframe){
anc_matrix=dataframe[names(dataframe)==ancestor][[1]]
desc_matrix=dataframe[names(dataframe)==descendant][[1]]
if (max(anc_matrix$age)<=max(desc_matrix$age)){
print('The descendant species is older or, at least, as old as the ancestral')
}
else{
desc_value=desc_matrix[nrow(desc_matrix)][,2]
anc_values=anc_matrix[anc_matrix$age>
max(desc_matrix$age[nrow(desc_matrix)])][,2]
std_diff=-sweep(as.matrix(anc_values),2,as.matrix(desc_value))
std_diff}
}
clado_changes=list()
clado_changes[[1]]=clado_morph_change('coll','auric',age_sorted_clado)
clado_changes[[2]]=clado_morph_change('auric','nsp09',age_sorted_clado)
clado_changes[[3]]=clado_morph_change('nsp09','nsp10',age_sorted_clado)
clado_changes[[4]]=clado_morph_change('lacry','nsp03',age_sorted_clado)
clado_changes[[5]]=clado_morph_change('nsp03','nsp04',age_sorted_clado)
clado_time_d=list()
clado_time_d[[1]]=clado_time('coll','auric',age_sorted_clado)
clado_time_d[[2]]=clado_time('auric','nsp09',age_sorted_clado)
clado_time_d[[3]]=clado_time('nsp09','nsp10',age_sorted_clado)
clado_time_d[[4]]=clado_time('lacry','nsp03',age_sorted_clado)
clado_time_d[[5]]=clado_time('nsp03','nsp04',age_sorted_clado)
deltazmi.clado <-unlist(clado_changes[2:5])
time.clado=abs(unlist(clado_time_d[2:5]))
rel_time_morph_clado=data.frame(deltazmi.clado,time.clado)
names(rel_time_morph_clado)=c("deltaz","time")
Rate_clado=ggplot(rel_time_morph_clado, aes(deltazmi.clado/time.clado))+
geom_histogram(color="darkblue", fill="lightblue") +xlab("Rate of Evolution")
Rate_clado
age_sorted_ana=age_sorted_clado
ana_morph_change=function (ancestor,descendant, dataframe){
anc_matrix=dataframe[names(dataframe)==ancestor][[1]]
desc_matrix=dataframe[names(dataframe)==descendant][[1]]
anc_values=anc_matrix[anc_matrix$age>
max(desc_matrix$age[nrow(desc_matrix)])][,4:11]
ana_values=anc_matrix[anc_matrix$age<=
max(desc_matrix$age[nrow(desc_matrix)])][,4:11]
std_diff=-sweep(as.matrix(anc_values),2,
as.matrix(ana_values[nrow(ana_values)]))/as.matrix(anc_values)
std_diff_multi=colSums(t(std_diff)^2)^0.5
std_diff_multi
}
ana_time=function (ancestor,descendant, dataframe){
anc_matrix=dataframe[names(dataframe)==ancestor][[1]]
desc_matrix=dataframe[names(dataframe)==descendant][[1]]
desc_value=desc_matrix[nrow(desc_matrix)][,2]
anc_values=anc_matrix[anc_matrix$age>
max(desc_matrix$age[nrow(desc_matrix)])][,2]
ana_values=anc_matrix[anc_matrix$age<=
max(desc_matrix$age[nrow(desc_matrix)])][,2]
std_diff=-sweep(as.matrix(anc_values),2,as.matrix(ana_values[nrow(ana_values)]))
std_diff
}
ana_changes=list()
ana_changes[[1]]=ana_morph_change('coll','auric',age_sorted_clado)
ana_changes[[2]]=ana_morph_change('auric','nsp09',age_sorted_clado)
ana_changes[[3]]=ana_morph_change('nsp09','nsp10',age_sorted_clado)
ana_changes[[4]]=ana_morph_change('lacry','nsp03',age_sorted_clado)
ana_changes[[5]]=ana_morph_change('nsp03','nsp04',age_sorted_clado)
ana_time_d=list()
ana_time_d[[1]]=ana_time('coll','auric',age_sorted_clado)
ana_time_d[[2]]=ana_time('auric','nsp09',age_sorted_clado)
ana_time_d[[3]]=ana_time('nsp09','nsp10',age_sorted_clado)
ana_time_d[[4]]=ana_time('lacry','nsp03',age_sorted_clado)
ana_time_d[[5]]=ana_time('nsp03','nsp04',age_sorted_clado)
deltazmi.ana.comp <-unlist(ana_changes[2:5])
time.ana.comp=abs(unlist(ana_time_d[2:5]))
#Organizing the comparison
clado=as.data.frame(deltazmi.clado/time.clado)
ana_full=as.data.frame(deltazmi_vect/time_vec)
ana_comp=as.data.frame(deltazmi.ana.comp/time.ana.comp)
myList <- list(clado,ana_full,ana_comp)
l <- myList
dat_comp=do.call(rbind.fill, l)
melt_df <- melt(dat_comp)
levels(melt_df$variable)=c("Cladogenesis", "Anagenesis-Sequential",
"Anagenesis-Comparable")
melt_df=melt_df[complete.cases(melt_df),]
Fig_comp_ana_clado2=ggplot(melt_df, aes(x=variable, y=value,fill=variable)) +
scale_y_continuous(trans='log10')+
geom_boxplot(alpha=0.2) +xlab(NULL)+ylab("Rate of morphological change")
Fig_comp_ana_clado2
Fig_rate_ana
#Preparing the data
colony_SP=split.data.frame(dat_lg_N,dat_lg_N$SP.x)
sample_sizes=lapply(colony_SP,function(x){dim(x)[1]})
enough=as.matrix(sample_sizes)>100
colony_final=colony_SP[names(enough[enough==T,])]
col_data=lapply(colony_final,function(x) x[complete.cases(x),])
#Setting priors for MCMC chain
phen.var=lapply(col_data,function (x){ (cov(x[,3:10]))})
prior=lapply(phen.var, function (x){list(G=list(G1=list(V=x/2,n=2),
G2=list(V=x/4,n=2)),
R=list(V=x/4,n=2))})
col_data
phen.var
prior
#Running the MCMC chain
model_G=list()
for (i in 1:length(col_data)){
model_G[[i]]<-MCMCglmm(cbind(LZ,WZ, LO, WO, LD, LAVS, LAVL, NUMA)~trait-1,
random=~us(trait):COL + us(trait):age,
rcov=~us(trait):units,
family=rep("gaussian",8),
data=col_data[[i]],
nitt=1500000,thin=1000,burnin=500000,
prior=prior[[i]],verbose=TRUE)
}
for (i in 1:length(col_data)){
model_G[[i]]<-MCMCglmm(cbind(LZ,WZ, LO, WO, LD, LAVS, LAVL, NUMA)~trait-1,
random=~us(trait):COL + us(trait):age,
rcov=~us(trait):units,
family=rep("gaussian",8),
data=col_data[[i]],
nitt=1500000,thin=1000,burnin=500000,
prior=prior[[i]],verbose=TRUE)
}
#Running the MCMC chain
model_G=list()
for (i in 1:length(col_data)){
model_G[[i]]<-MCMCglmm(cbind(LZ,WZ, LO, WO, LD, LAVS, LAVL, NUMA)~trait-1,
random=~us(trait):COL + us(trait):age,
rcov=~us(trait):units,
family=rep("gaussian",8),
data=col_data[[i]],
nitt=1500000,thin=1000,burnin=500000,
prior=prior[[i]],verbose=TRUE)
}
#Running the MCMC chain
model_G=list()
for (i in 1:length(col_data)){
model_G[[i]]<-MCMCglmm(cbind(LZ,WZ, LO, WO, LD, LAVS, LAVL, NUMA)~trait-1,
random=~us(trait):COL + us(trait):age,
rcov=~us(trait):units,
family=rep("gaussian",8),
data=col_data[[i]],
nitt=1500000,thin=1000,burnin=500000,
prior=prior[[i]],verbose=TRUE)
}
