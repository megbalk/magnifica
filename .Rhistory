#### P MATRIX ----
#check number of colonies NOT zooids:
col_form = split.data.frame(mean_by_formation_colony,
mean_by_formation_colony$formation) #zooids per formation
col_form
#just to look; max 328, smallest 19
col_form.n = lapply(col_form, function(x){dim(x)[1]})
col_form.n
by_form = split.data.frame(mean_by_formation_colony,
mean_by_formation_colony$formation)
by_form
p.form_data = lapply(by_form, function(x) x[complete.cases(x),])
p.cov = lapply(p.form_data, function (x){ (cov(x[, 4:11]))}) #traits per colony (not variation within colony)
##### P VARIANCES ----
##Phenotypic variance in traits and eigen vectors
Pmat = p.cov
lapply(Pmat, isSymmetric)  #is.symmetric.matrix
p.variances = lapply(Pmat, diag)
paste("Trait variances")
head(p.variances)
p.eig_variances = lapply(Pmat, function (x) {eigen(x)$values})
# lapply(Pmat, function (x) {eigen(x)})
paste("Eigenvalue variances")
head(p.eig_variances)
p.eig_percent = lapply(p.eig_variances, function (x) {x/sum(x)})
p.eig_per_mat = do.call(rbind, p.eig_percent)
p.eig_per_mat = data.frame(p.eig_per_mat, rownames(p.eig_per_mat))
p.eig_per = melt(p.eig_per_mat)
#dev.off()
P_PC_dist = ggplot(p.eig_per,
aes(x = variable, y = value,
group = rownames.p.eig_per_mat.,
colour = rownames.p.eig_per_mat.)) +
geom_line(aes(linetype = rownames.p.eig_per_mat.)) +
geom_point() +
xlab("Principal component rank") +
ylab("%Variation in the PC")
P_PC_dist #one negative; none above 1!
ggsave(P_PC_dist, file = "./Results/P_PC_dist_form.png",
width = 14, height = 10, units = "cm")
###### P NOISE ------
##Controlling for noise
#Extend G
P_ext = lapply(Pmat, function (x){ ExtendMatrix(x, ret.dim = 6)$ExtMat}) #not 8 because last eigen value (#8) was negative
#ignore warning from above
lapply(P_ext, isSymmetric)
P_Ext_std_variances = lapply(P_ext, diag)
P_Ext_eig_variances = lapply(P_ext, function (x) {eigen(x)$values})
#### G MATRIX ----
#keep at zooid level because correct for this later
zoo_form = split.data.frame(dat_lg_N, dat_lg_N$formation) #zooids per formation
zoo_form
#just to look; highest 7836, smallest 454
zoo_form.n = lapply(zoo_form, function(x){dim(x)[1]})
zoo_form.n
zooid_by_form = split.data.frame(dat_lg_N, dat_lg_N$formation)
zooid_by_form
zooid_form_data = lapply(zooid_by_form, function(x) x[complete.cases(x),])
zooid_form_data
##### PRIORS -----
phen.var = lapply(zooid_form_data, function (x){ (cov(x[, 4:11]))}) #traits of ALL; correct for colony later
prior = lapply(phen.var, function (x){list(G = list(G1 = list(V = x/2, nu = 2)),
R = list(V = x/4, nu = 2))})
##### MCMC -----
#Running the MCMC chain
model_G = list()
for (i in 1:1){ #length 7 because 7 formations #length(formation_list)
model_G[[i]] <- MCMCglmm(cbind(ln.zh, ln.mpw.b, ln.cw.m, ln.cw.d, #same order as in priors
ln.ow.m, ln.c.side, ln.o.side, ln.oh) ~ trait-1,
#account for variation w/in colony:
random = ~us(trait):colony.id, #the number of these determines # of Gs #+ us(trait):formation
rcov = ~us(trait):units,
family = rep("gaussian", 8), #num of traits
data = zooid_form_data[[i]],
nitt = 1500000, thin = 1000, burnin = 500000,
prior = prior[[i]], verbose = TRUE)
}
data.list = list(model_G, dat_lg_N, zooid_form_data, mean_by_formation_colony)
save(data.list, file = "./Results/g_matrices_data_1form.RData")
summary(model_G[[1]])
##plots to see where sampling from:
plot(model_G[[1]]$VCV) #catepillar!
###### POSTERIOR G MATRIX ------
#Retrieving G from posterior
g.model = model_G
g.data = (dat_lg_N)
dat_lg_N
g.data = (dat_lg_N)
ntraits = 8
Gmat = lapply(g.model, function (x) {
matrix(posterior.mode(x$VCV)[1:ntraits^2], ntraits, ntraits)})
Gmat
names(zooid_form_data)
names(Gmat) = names(zooid_by_form[1]) #formation_list #[1]
names(Gmat)
##### G VARIANCES -----
lapply(Gmat, isSymmetric)  #is.symmetric.matrix
g.variances = lapply(Gmat, diag)
paste("Trait variances")
head(g.variances)
g.eig_variances = lapply(Gmat, function (x) {eigen(x)$values})
paste("Eigenvalue variances")
head(g.eig_variances)
g.eig_percent = lapply(g.eig_variances, function (x) {x/sum(x)})
g.eig_per_mat = do.call(rbind, g.eig_percent)
g.eig_per_mat = data.frame(g.eig_per_mat, rownames(g.eig_per_mat))
g.eig_per = melt(g.eig_per_mat)
#dev.off()
G_PC_dist = ggplot(g.eig_per,
aes(x = variable, y = value,
group = rownames.g.eig_per_mat.,
colour = rownames.g.eig_per_mat.)) +
geom_line(aes(linetype = rownames.g.eig_per_mat.)) +
geom_point() +
xlab("Principal component rank") +
ylab("%Variation in the PC")
G_PC_dist #one negative; none above 1!
###### G NOISE ------
##Controlling for noise
#Extend G
G_ext = lapply(Gmat, function (x){ ExtendMatrix(x, ret.dim = 6)$ExtMat}) #not 8 because last eigen value (#8) was negative
#ignore warning from above
lapply(G_ext, isSymmetric)
Ext_std_variances = lapply(G_ext, diag)
Ext_eig_variances = lapply(G_ext, function (x) {eigen(x)$values})
##need to create random cov.m for comparison
cov.m <- RandomMatrix(8, 1, 1, 100)
G_list <- list(G_ext[[1]], cov.m)
comp_mat = RandomSkewers(G_list) #need at least
corr_mat = comp_mat$correlations + t(comp_mat$correlations)
diag(corr_mat) = 1
paste("Random Skewers similarity matrix")
corrplot.mixed(corr_mat,upper = "number", lower = "pie")
#formations and colors:
#NKLS = #F8766D
#NKBS = #CD9600
#Twekesbury = #7CAE00
#Waipuru = #00BE67
#Upper Kai-Iwi = #00A9FF
#Tainui = #C77CFF
#SHCSBSB = #FF61CC
col.form = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00A9FF", "#C77CFF", "#FF61CC")
plot(diag(Gmat[[1]]), diag(Pmat[[1]]),
pch = 19, col = col.form[1],
xlab = "G non-standardized diagonal",
ylab = "P non-standardized diagonal",
main = "NKLS")
abline(0, 1)
diag(Gmat[[1]])
diag(Pmat[[1]])
diag(Gmat[[1]])
library(ggplot2)
library(data.table)
library(evolqg)
library(dplyr)
library(nse)
library(grid)
library(gridBase)
library(gridExtra)
library(MCMCglmm)
library(corrplot)
library(MASS)
library(reshape2)
library(scatterplot3d)
library(rgl)
library(scales)
library(RColorBrewer)
library(coin)
load(file="New_g_matrices.RData") #load the g matrices calculated above
Gmat
#### G MATRIX ----
#keep at zooid level because correct for this later
zooid_by_form = split.data.frame(dat_lg_N, dat_lg_N$formation) #zooids per formation
#just to look; highest 7836, smallest 454
zoo_form.n = lapply(zooid_by_form, function(x){dim(x)[1]})
zoo_form.n
zooid_form_data = lapply(zooid_by_form, function(x) x[complete.cases(x),])
zooid_form_data
Gmat
diag(Gmat)
diag(Gmat[[1]])
diag(Gmat[1])
diag(G_ext)
diag(G_ext[[1]])
diag(P_ext[[1]])
diag(G_ext[[1]])
col_form.n
by_form
#### LOAD LIBRARIES ----
library(ggplot2)
library(data.table)
library(evolqg)
library(dplyr)
library(nse)
library(grid)
library(gridBase)
library(gridExtra)
library(MCMCglmm)
library(corrplot)
library(MASS)
library(reshape2)
library(scatterplot3d)
library(rgl)
library(scales)
library(RColorBrewer)
library(coin)
df <- read.csv("./Results/traits_26Jun2023.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
df$zooid.id <- paste0(df$boxID, "_", df$image)
colnames(df)[colnames(df) == 'specimenNR'] <- 'colony.id'
zooid_list <- unique(df$zooid.id)
length(zooid_list) #15773
colony_list <- unique(df$colony.id)
length(colony_list) #742
##### FORMATIONS ----
# arrange formations from oldest to youngest
df$formation <- factor(df$formation, levels = c("NKLS", "NKBS", "Tewkesbury",
"Waipuru", "Upper Kai-Iwi",
"Tainui", "SHCSBSB"))
formation_list <- unique(df$formation)
length(formation_list) #7
##### LN TRANSFORM -----
df$ln.zh <- log(df$zh)
df$ln.mpw.b <- log(df$mpw.b)
df$ln.cw.m <- log(df$cw.m)
df$ln.cw.d <- log(df$cw.d)
df$ln.ow.m <- log(df$ow.m)
df$ln.oh <- log(df$oh)
df$ln.o.side <- log(df$o.side)
df$ln.c.side <- log(df$c.side)
traits = names(df[, c("ln.zh", "ln.mpw.b", "ln.cw.m", "ln.cw.d",
"ln.ow.m", "ln.oh", "ln.c.side", "ln.o.side")])
##### TRIM DATASET ----
df.trim <- df %>%
dplyr::select(zooid.id, colony.id, formation, matches(traits))
colNums <- match(c(traits, "zooid.id"), names(df.trim))
df = as.data.frame(df.trim)
#### PLOT TRAITS ----
p.zh = ggplot(data = df) +
geom_density(aes(x = df[, traits[1]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[1])
p.mpw.b = ggplot(data = df) +
geom_density(aes(x = df[, traits[2]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[2])
p.cw.m = ggplot(data = df) +
geom_density(aes(x = df[, traits[3]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[3])
p.cw.d = ggplot(data = df) +
geom_density(aes(x = df[, traits[4]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[4])
p.ow.m = ggplot(data = df) +
geom_density(aes(x = df[, traits[5]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[5])
p.oh = ggplot(data = df) +
geom_density(aes(x = df[, traits[6]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[6])
#### REDUCE TO TRAITS OF INTEREST ----
trt_lg_N = c("formation", "colony.id", "zooid.id", traits)
dat_lg_N = df[intersect(colnames(df), trt_lg_N)]
head(dat_lg_N)
mean_by_formation_colony = dat_lg_N %>% #use this going forward
group_by(formation, colony.id) %>%
summarize(n.zooid = length(unique(zooid.id)),
avg.zh = mean(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T)) %>%
as.data.frame()
#means of means
mean_by_formation = mean_by_formation_colony %>%
group_by(formation) %>%
summarize(n.col = length(unique(colony.id)),
avg.zh = mean(avg.zh, na.rm = T),
avg.mpw.b = mean(avg.mpw.b, na.rm = T),
avg.cw.m = mean(avg.cw.m, na.rm = T),
avg.cw.d = mean(avg.cw.d, na.rm = T),
avg.ow.m = mean(avg.ow.m, na.rm = T),
avg.oh = mean(avg.oh, na.rm = T),
avg.o.side = mean(avg.o.side, na.rm = T),
avg.c.side = mean(avg.c.side, na.rm = T)) %>%
as.data.frame()
colony_means = dat_lg_N %>%
group_by(colony.id) %>%
summarize(formation = formation[1],
n.zooid = length(unique(zooid.id)),
avg.zh = mean(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T)) %>%
as.data.frame()
means = dat_lg_N %>%
summarize(avg.zh = mean(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T)) %>%
as.data.frame()
#### P MATRIX ----
#check number of zooids NOT colonies:
# by colonies use mean_by_formation_colony
# by zooid us dat_lg_N
col_form = split.data.frame(dat_lg_N,  #by zooids
dat_lg_N$formation) #zooids per formation
#just to look; max 328, smallest 19
col_form.n = lapply(col_form, function(x){dim(x)[1]})
col_form.n
#colonies per formation: max 328, smallest 19
#zooids per formation: max 7836, min 454
col_form.n = lapply(col_form, function(x){dim(x)[1]})
## by zooids:
by_form = split.data.frame(dat_lg_N,
dat_lg_N$formation)
p.form_data = lapply(by_form, function(x) x[complete.cases(x),])
p.cov = lapply(p.form_data, function (x){ (cov(x[, 4:11]))}) #traits per colony (not variation within colony)
##### P VARIANCES ----
##Phenotypic variance in traits and eigen vectors
Pmat = p.cov
lapply(Pmat, isSymmetric)  #is.symmetric.matrix
p.variances = lapply(Pmat, diag)
paste("Trait variances")
head(p.variances)
p.eig_variances = lapply(Pmat, function (x) {eigen(x)$values})
# lapply(Pmat, function (x) {eigen(x)})
paste("Eigenvalue variances")
head(p.eig_variances)
p.eig_percent = lapply(p.eig_variances, function (x) {x/sum(x)})
p.eig_per_mat = do.call(rbind, p.eig_percent)
p.eig_per_mat = data.frame(p.eig_per_mat, rownames(p.eig_per_mat))
p.eig_per = melt(p.eig_per_mat)
#dev.off()
P_PC_dist = ggplot(p.eig_per,
aes(x = variable, y = value,
group = rownames.p.eig_per_mat.,
colour = rownames.p.eig_per_mat.)) +
geom_line(aes(linetype = rownames.p.eig_per_mat.)) +
geom_point() +
xlab("Principal component rank") +
ylab("%Variation in the PC")
P_PC_dist #one negative; none above 1!
ggsave(P_PC_dist, file = "./Results/P_PC_dist_form.png",
width = 14, height = 10, units = "cm")
###### P NOISE ------
##Controlling for noise
#Extend G
P_ext = lapply(Pmat, function (x){ ExtendMatrix(x, ret.dim = 6)$ExtMat}) #not 8 because last eigen value (#8) was negative
#ignore warning from above
lapply(P_ext, isSymmetric)
P_Ext_std_variances = lapply(P_ext, diag)
P_Ext_eig_variances = lapply(P_ext, function (x) {eigen(x)$values})
#### G MATRIX ----
#keep at zooid level because correct for this later
zooid_by_form = split.data.frame(dat_lg_N, dat_lg_N$formation) #zooids per formation
plot(diag(Gmat[[1]]), diag(Pmat[[1]]),
pch = 19, col = col.form[1],
xlab = "G non-standardized diagonal",
ylab = "P non-standardized diagonal",
main = "NKLS")
load(file="./Results/g_matrices_data_1form.RData") #load the g matrices calculated above
##### G VARIANCES -----
lapply(Gmat, isSymmetric)  #is.symmetric.matrix
g.variances = lapply(Gmat, diag)
data.list
str(data.list)
data.list[[1]]
mg <- data.list[[1]]
summary(mg[[1]])
model_G <- data.list[[1]]
summary(model_G[[1]])
##plots to see where sampling from:
plot(model_G[[1]]$VCV) #catepillar!
##plots to see where sampling from:
plot(model_G[[1]]$VCV) #catepillar!
###### POSTERIOR G MATRIX ------
#Retrieving G from posterior
g.model = model_G
ntraits = 8
Gmat = lapply(g.model, function (x) {
matrix(posterior.mode(x$VCV)[1:ntraits^2], ntraits, ntraits)})
#label lists as formations
names(Gmat) = names(zooid_by_form[1]) #formation_list #[1]
##### G VARIANCES -----
lapply(Gmat, isSymmetric)  #is.symmetric.matrix
g.variances = lapply(Gmat, diag)
paste("Trait variances")
head(g.variances)
g.eig_variances = lapply(Gmat, function (x) {eigen(x)$values})
paste("Eigenvalue variances")
head(g.eig_variances)
g.eig_percent = lapply(g.eig_variances, function (x) {x/sum(x)})
g.eig_per_mat = do.call(rbind, g.eig_percent)
g.eig_per_mat = data.frame(g.eig_per_mat, rownames(g.eig_per_mat))
g.eig_per = melt(g.eig_per_mat)
#dev.off()
G_PC_dist = ggplot(g.eig_per,
aes(x = variable, y = value,
group = rownames.g.eig_per_mat.,
colour = rownames.g.eig_per_mat.)) +
geom_line(aes(linetype = rownames.g.eig_per_mat.)) +
geom_point() +
xlab("Principal component rank") +
ylab("%Variation in the PC")
G_PC_dist #one negative; none above 1!
dev.off()
#dev.off()
G_PC_dist = ggplot(g.eig_per,
aes(x = variable, y = value,
group = rownames.g.eig_per_mat.,
colour = rownames.g.eig_per_mat.)) +
geom_line(aes(linetype = rownames.g.eig_per_mat.)) +
geom_point() +
xlab("Principal component rank") +
ylab("%Variation in the PC")
G_PC_dist #one negative; none above 1!
P_PC_dist
G_PC_dist #one negative; none above 1!
###### G NOISE ------
##Controlling for noise
#Extend G
G_ext = lapply(Gmat, function (x){ ExtendMatrix(x, ret.dim = 6)$ExtMat}) #not 8 because last eigen value (#8) was negative
#ignore warning from above
lapply(G_ext, isSymmetric)
Ext_std_variances = lapply(G_ext, diag)
Ext_eig_variances = lapply(G_ext, function (x) {eigen(x)$values})
##need to create random cov.m for comparison
cov.m <- RandomMatrix(8, 1, 1, 100)
G_list <- list(G_ext[[1]], cov.m)
comp_mat = RandomSkewers(G_list) #need at least
corr_mat = comp_mat$correlations + t(comp_mat$correlations)
diag(corr_mat) = 1
paste("Random Skewers similarity matrix")
corrplot.mixed(corr_mat,upper = "number", lower = "pie")
#formations and colors:
#NKLS = #F8766D
#NKBS = #CD9600
#Twekesbury = #7CAE00
#Waipuru = #00BE67
#Upper Kai-Iwi = #00A9FF
#Tainui = #C77CFF
#SHCSBSB = #FF61CC
col.form = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00A9FF", "#C77CFF", "#FF61CC")
plot(diag(Gmat[[1]]), diag(Pmat[[1]]),
pch = 19, col = col.form[1],
xlab = "G non-standardized diagonal",
ylab = "P non-standardized diagonal",
main = "NKLS")
abline(0, 1)
plot(diag(Gmat[[1]]), diag(Pmat[[1]]),
pch = 19, col = col.form[1],
xlab = "G non-standardized diagonal",
ylab = "P non-standardized diagonal",
main = "NKLS")
abline(0, 1)
plot(diag(Gmat[[1]]), diag(Pmat[[1]]),
pch = 19, col = col.form[1],
xlab = "G non-standardized diagonal",
ylab = "P non-standardized diagonal",
main = "NKLS",
xlab = c(0, .1),
ylab = c(0, .5))
plot(diag(Gmat[[1]]), diag(Pmat[[1]]),
pch = 19, col = col.form[1],
xlab = "G non-standardized diagonal",
ylab = "P non-standardized diagonal",
main = "NKLS",
xlim = c(0, .1),
ylim = c(0, .5))
abline(0, 1)
plot(diag(Gmat[[1]]), diag(Pmat[[1]]),
pch = 19, col = col.form[1],
xlab = "G non-standardized diagonal",
ylab = "P non-standardized diagonal",
main = "NKLS",
xlim = c(0, .05),
ylim = c(0, .2))
abline(0, 1)
