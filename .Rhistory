as.data.frame()
ss.ns.aves
View(ss.ns.aves )
colnames(aves)
ss.ns.aves <- aves %>%
filter(TraitType == "Sexual") %>%
group_by(Species3_BirdTree) %>%
summarise(fam = Family3[1],
n.sex.traits = length(unique(Trait)))  %>%
as.data.frame()
View(ss.ns.aves )
unique(aves$Trait)
ss.ns.aves <- aves %>%
filter(TraitType == "Sexual") %>%
select(-Retrix1, -Retrix2, -Retrix3, -Retrix4, -Retrix5) %>%
group_by(Species3_BirdTree) %>%
summarise(fam = Family3[1],
n.sex.traits = length(unique(Trait)))  %>%
as.data.frame()
ss.ns.aves <- aves %>%
filter(TraitType == "Sexual",
Trait != Retrix1,
Trait != Retrix2,
Trait != Retrix3,
Trait != Retrix4,
Trait != Retrix5) %>%
group_by(Species3_BirdTree) %>%
summarise(fam = Family3[1],
n.sex.traits = length(unique(Trait)))  %>%
as.data.frame()
ss.ns.aves <- aves %>%
filter(TraitType == "Sexual",
Trait != "Retrix1",
Trait != "Retrix2",
Trait != "Retrix3",
Trait != "Retrix4",
Trait != "Retrix5") %>%
group_by(Species3_BirdTree) %>%
summarise(fam = Family3[1],
n.sex.traits = length(unique(Trait)))  %>%
as.data.frame()
View(ss.ns.aves)
ss.ns.aves <- aves %>%
filter(TraitType == "Sexual",
Trait != "Retrix1", #corr with Tail Length
Trait != "Retrix2",
Trait != "Retrix3",
Trait != "Retrix4",
Trait != "Retrix5",
Trait != "Syllable.rep.final") %>% #corr with Song.rep.final; have more data for Song.rep.final
group_by(Species3_BirdTree) %>%
summarise(fam = Family3[1],
n.sex.traits = length(unique(Trait)))  %>%
as.data.frame()
View(ss.ns.aves)
table(ss.ns.aves$n.sex.traits)
(220+62+26)/(874+220+62+26)
26/(874+220+62+26)
colnames(aves)
unique(aves$Trait)
ss.aves <- aves %>%
filter(TraitType == "Sexual",
Trait != "Retrix1", #corr with Tail Length
Trait != "Retrix2",
Trait != "Retrix3",
Trait != "Retrix4",
Trait != "Retrix5",
Trait != "Syllable.rep.final") %>% #corr with Song.rep.final; have more data for Song.rep.final
group_by(Trait) %>%
summarise(n.trait = sum(!is.na(MeanTraitVal)),
n.spur = sum(!is.na(MaxTraitVal)))
ss.aves <- aves %>%
filter(TraitType == "Sexual",
Trait != "Retrix1", #corr with Tail Length
Trait != "Retrix2",
Trait != "Retrix3",
Trait != "Retrix4",
Trait != "Retrix5",
Trait != "Syllable.rep.final") %>% #corr with Song.rep.final; have more data for Song.rep.final
group_by(Trait) %>%
summarise(n.trait = sum(!is.na(MeanTraitVal)),
n.spur = sum(!is.na(MaxTraitVal))) %>%
as.data.frame()
View(ss.aves)
View(ss.aves)
sp.sperm <- unique(aves$Species3_BirdTree[aves$Trait == "Total.Sperm.Length"])
sp.song <- unique(aves$Species3_BirdTree[aves$Trait == "Song.rep.rinal"])
sp.song <- unique(aves$Species3_BirdTree[aves$Trait == "Song.rep.final"])
setdiff(sp.sperm, sp.song)
length(setdiff(sp.sperm, sp.song))
length(setdiff(sp.song, sp.sperm))
225-93
933/225
93/225
View(ss.aves)
View(ss.ns.aves)
table(ss.ns.aves$n.sex.traits)
load(file="./Results/g_matrices_data_form.RData") #load the g matrices calculated above
setwd("~/Documents/GitHub/bryozoa/magnifica/Scripts")
setwd("~/Documents/GitHub/bryozoa/magnifica/")
load(file="./Results/g_matrices_data_form.RData") #load the g matrices calculated above
load(file="./Results/g_matrices_data_form_reg.RData") #load the g matrices calculated above
str(g_matrices_data_form_reg.RData)
g_matrices_data_form_reg.RData
g_matrices_data_form_reg
load(file="./Results/g_matrices_data_form_reg.RData") #load the g matrices calculated above
data.list
str(data.list)
model_G <- data.list[[1]]
dat_lg_N <- data.list[[2]]
form_data <- data.list[[3]]
mean_by_formation_colony <- data.list[[4]]
##### CHECK MODELS -----
formation_list #order of formations
summary(model_G[[1]])
summary(model_G[[2]])
summary(model_G[[3]])
summary(model_G[[4]])
summary(model_G[[5]])
summary(model_G[[6]])
summary(model_G[[7]])
model_G[[1]]
###### POSTERIOR G MATRIX ------
#Retrieving G from posterior
g.model = model_G
ntraits = 8
Gmat = lapply(g.model, function (x) {
matrix(posterior.mode(x$VCV)[1:ntraits^2], ntraits, ntraits)})
#label lists as formations
names(Gmat) = names(by_form) #formation_list or form_data
# why aren't traits labeled??
for (i in seq_along(Gmat)){
colnames(Gmat[[i]]) <- traits
}
for (i in seq_along(Gmat)){
rownames(Gmat[[i]]) <- traits
}
###### POSTERIOR G MATRIX ------
#Retrieving G from posterior
g.model = model_G
ntraits = 8
Gmat = lapply(g.model, function (x) {
matrix(posterior.mode(x$VCV)[1:ntraits^2], ntraits, ntraits)})
#### LOAD LIBRARIES ----
library(coin)
library(corrplot)
library(data.table)
library(dplyr)
library(evolqg)
library(evolvability)
library(ggplot2)
library(grid)
library(gridBase)
library(gridExtra)
library(magrittr)
library(MASS)
library(MCMCglmm)
library(nse)
library(RColorBrewer)
library(reshape2)
library(rgl)
library(scales)
library(MCMCglmm)
library(nse)
library(RColorBrewer)
library(reshape2)
library(rgl)
library(scales)
library(scatterplot3d)
library(tibble)
###### POSTERIOR G MATRIX ------
#Retrieving G from posterior
g.model = model_G
ntraits = 8
Gmat = lapply(g.model, function (x) {
matrix(posterior.mode(x$VCV)[1:ntraits^2], ntraits, ntraits)})
#label lists as formations
names(Gmat) = names(by_form) #formation_list or form_data
# why aren't traits labeled??
for (i in seq_along(Gmat)){
colnames(Gmat[[i]]) <- traits
}
df <- read.csv("./Results/colonies.traits.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
sm.df <- read.csv("./Results/small.colonies.traits.csv",
header = TRUE,
sep = ",",
stringsAsFactors = FALSE)
col.form = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67",
"#00A9FF", "#C77CFF", "#FF61CC")
col.traits = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67",
"#00BFC4", "#00A9FF", "#C77CFF", "#FF61CC")
zooid_list <- unique(df$zooid.id)
length(zooid_list) #5480 (was 15773)
colony_list <- unique(df$colony.id)
length(colony_list) #541 (was 742)
##### FORMATIONS ----
# arrange formations from oldest to youngest
df$formation <- factor(df$formation, levels = c("NKLS", "NKBS", "Tewkesbury",
"Waipuru", "Upper Kai-Iwi",
"Tainui", "SHCSBSB"))
formation_list <- unique(df$formation)
length(formation_list) #7
#same order as in df
names(df)
traits = names(df[, c("ln.zh", "ln.mpw.b", "ln.cw.m", "ln.cw.d",
"ln.ow.m", "ln.oh", "ln.c.side", "ln.o.side")])
##### TRIM DATASET ----
df.trim <- df %>%
dplyr::select(zooid.id, colony.id, formation, matches(traits))
colNums <- match(c(traits, "zooid.id"), names(df.trim))
df = as.data.frame(df.trim)
##### DISTRIBUTIONS -----
p.zh = ggplot(data = df) +
geom_density(aes(x = df[, traits[1]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[1]) +
scale_color_manual(values = col.form)
p.mpw.b = ggplot(data = df) +
geom_density(aes(x = df[, traits[2]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[2]) +
scale_color_manual(values = col.form)
p.cw.m = ggplot(data = df) +
geom_density(aes(x = df[, traits[3]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[3]) +
scale_color_manual(values = col.form)
p.cw.d = ggplot(data = df) +
geom_density(aes(x = df[, traits[4]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[4]) +
scale_color_manual(values = col.form)
p.ow.m = ggplot(data = df) +
geom_density(aes(x = df[, traits[5]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[5]) +
scale_color_manual(values = col.form)
p.oh = ggplot(data = df) +
geom_density(aes(x = df[, traits[6]],
group = formation,
col = formation)) +
theme(text = element_text(size = 16),
legend.position = "none") +
scale_x_continuous(name = traits[6]) +
scale_color_manual(values = col.form)
#### REDUCE TO TRAITS OF INTEREST ----
trt_lg_N = c("formation", "colony.id", "zooid.id", traits)
dat_lg_N = df[intersect(colnames(df), trt_lg_N)]
head(dat_lg_N) #traits in same order as df and traits
mean_by_formation_colony = dat_lg_N %>% #use this going forward
group_by(formation, colony.id) %>%
summarize(n.zooid = length(zooid.id),
avg.zh = mean(ln.zh, na.rm = T),
sd.zh = sd(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
sd.mpw.b = sd(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
sd.cw.m = sd(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
sd.cw.d = sd(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
sd.ow.m = sd(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
sd.oh = sd(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
sd.o.side = sd(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T),
sd.c.side = sd(ln.c.side, na.rm = T)) %>%
as.data.frame()
min(mean_by_formation_colony$n.zooid) #5
mean(mean_by_formation_colony1$sd.zh) #0.09225405
range(mean_by_formation_colony1$sd.zh) #0.02640565 0.57287376
colony_means = dat_lg_N %>%
group_by(colony.id) %>%
summarize(formation = formation[1],
n.zooid = length(unique(zooid.id)),
avg.zh = mean(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T)) %>%
as.data.frame()
means = dat_lg_N %>%
summarize(avg.zh = mean(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T)) %>%
as.data.frame()
#### CHECK SAMPLE SIZES ----
## number of zooids per colony
range(mean_by_formation_colony$n.zooid)
#check number of zooids NOT colonies:
# by colonies use mean_by_formation_colony
# by zooid us dat_lg_N
col_form = split.data.frame(mean_by_formation_colony,  #by colonies
mean_by_formation_colony$formation) #zooids per formation
#just to look; max 328, smallest 19
col_form.n = lapply(col_form, function(x){dim(x)[1]})
#### SPLIT BY FORMATION ----
## by zooids:
by_form = split.data.frame(dat_lg_N,
dat_lg_N$formation)
#just to look; highest 7836, smallest 454
by_form.n = lapply(by_form, function(x){dim(x)[1]})
form_data = lapply(by_form, function(x) x[complete.cases(x),])
##### G VARIANCES -----
lapply(Gmat, isSymmetric)  #is.symmetric.matrix
g.variances = lapply(Gmat, diag)
paste("Trait variances")
head(g.variances)
###### G EIGEN ------
g.eig_variances = lapply(Gmat, function (x) {eigen(x)$values})
paste("Eigenvalue variances")
head(g.eig_variances)
g.eig_percent = lapply(g.eig_variances, function (x) {x/sum(x)})
g.eig_per_mat = do.call(rbind, g.eig_percent)
g.eig_per_mat = data.frame(g.eig_per_mat, rownames(g.eig_per_mat))
g.eig_per = melt(g.eig_per_mat)
g.eig_per_mat = do.call(rbind, g.eig_percent)
g.eig_per_mat = data.frame(g.eig_per_mat, rownames(g.eig_per_mat))
g.eig_per = melt(g.eig_per_mat)
dev.off()
###### G NOISE ------
##Controlling for noise
#Extend G
G_ext = lapply(Gmat, function (x){ ExtendMatrix(x, ret.dim = 6)$ExtMat}) #not 8 because last eigen value (#8) was negative
#ignore warning from above
lapply(G_ext, isSymmetric)
Ext_std_variances = lapply(G_ext, diag)
Ext_eig_variances = lapply(G_ext, function (x) {eigen(x)$values})
g.comp_mat = RandomSkewers(G_ext) #need at least
g.corr_mat = g.comp_mat$correlations + t(g.comp_mat$correlations)
diag(g.corr_mat) = 1
paste("Random Skewers similarity matrix")
corrplot.mixed(g.corr_mat,upper = "number", lower = "pie")
diag(Gmat[[1]]
)
diag(Gmat[[2]])
diag(Gmat[[3]])
diag(Gmat[[4]])
diag(Gmat[[5]])
diag(Gmat[[6]])
diag(Gmat[[7]])
# Function to convert vector to norm length
f.normalize_vector <- function(vector) {
norm_length <- sqrt(sum(vector^2))
normalized_vector <- vector / norm_length
return(normalized_vector)
}
NKLS <- as.numeric(mean_by_formation[1, 5:12]) # A vector containing trait means from sample/formation 1
NKBS <- as.numeric(mean_by_formation[2, 5:12]) # A vector containing trait means from sample/formation 2
tewk <- as.numeric(mean_by_formation[3, 5:12]) # A vector containing trait means from sample/formation 3
wai <- as.numeric(mean_by_formation[4, 5:12]) # A vector containing trait means from sample/formation 4
uki <- as.numeric(mean_by_formation[5, 5:12]) # A vector containing trait means from sample/formation 5
tai <- as.numeric(mean_by_formation[6, 5:12]) # A vector containing trait means from sample/formation 6
mean_by_formation_colony = dat_lg_N %>% #use this going forward
group_by(formation, colony.id) %>%
summarize(n.zooid = length(zooid.id),
avg.zh = mean(ln.zh, na.rm = T),
sd.zh = sd(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
sd.mpw.b = sd(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
sd.cw.m = sd(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
sd.cw.d = sd(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
sd.ow.m = sd(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
sd.oh = sd(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
sd.o.side = sd(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T),
sd.c.side = sd(ln.c.side, na.rm = T)) %>%
as.data.frame()
#means of means
mean_by_formation = mean_by_formation_colony %>%
group_by(formation) %>%
summarize(num.col = length(unique(colony.id)),
num.zooid = sum(n.zooid),
avg.zooid = mean(n.zooid),
avg.zh = mean(avg.zh, na.rm = T),
avg.mpw.b = mean(avg.mpw.b, na.rm = T),
avg.cw.m = mean(avg.cw.m, na.rm = T),
avg.cw.d = mean(avg.cw.d, na.rm = T),
avg.ow.m = mean(avg.ow.m, na.rm = T),
avg.oh = mean(avg.oh, na.rm = T),
avg.o.side = mean(avg.o.side, na.rm = T),
avg.c.side = mean(avg.c.side, na.rm = T)) %>%
as.data.frame()
mean_by_formation_colony
mean_by_formation_colony = dat_lg_N %>% #use this going forward
group_by(formation, colony.id) %>%
summarize(n.zooid = length(zooid.id),
avg.zh = mean(ln.zh, na.rm = T),
sd.zh = sd(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
sd.mpw.b = sd(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
sd.cw.m = sd(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
sd.cw.d = sd(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
sd.ow.m = sd(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
sd.oh = sd(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
sd.o.side = sd(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T),
sd.c.side = sd(ln.c.side, na.rm = T)) %>%
as.data.frame()
mean_by_formation_colony
#### REDUCE TO TRAITS OF INTEREST ----
trt_lg_N = c("formation", "colony.id", "zooid.id", traits)
dat_lg_N = df[intersect(colnames(df), trt_lg_N)]
head(dat_lg_N) #traits in same order as df and traits
mean_by_formation_colony = dat_lg_N %>% #use this going forward
group_by(formation, colony.id) %>%
summarize(n.zooid = length(zooid.id),
avg.zh = mean(ln.zh, na.rm = T),
sd.zh = sd(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
sd.mpw.b = sd(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
sd.cw.m = sd(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
sd.cw.d = sd(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
sd.ow.m = sd(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
sd.oh = sd(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
sd.o.side = sd(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T),
sd.c.side = sd(ln.c.side, na.rm = T)) %>%
as.data.frame()
mean_by_formation_colony
mean_by_formation_colony = dat_lg_N %>% #use this going forward
dplyr::group_by(formation, colony.id) %>%
summarize(n.zooid = length(zooid.id),
avg.zh = mean(ln.zh, na.rm = T),
sd.zh = sd(ln.zh, na.rm = T),
avg.mpw.b = mean(ln.mpw.b, na.rm = T),
sd.mpw.b = sd(ln.mpw.b, na.rm = T),
avg.cw.m = mean(ln.cw.m, na.rm = T),
sd.cw.m = sd(ln.cw.m, na.rm = T),
avg.cw.d = mean(ln.cw.d, na.rm = T),
sd.cw.d = sd(ln.cw.d, na.rm = T),
avg.ow.m = mean(ln.ow.m, na.rm = T),
sd.ow.m = sd(ln.ow.m, na.rm = T),
avg.oh = mean(ln.oh, na.rm = T),
sd.oh = sd(ln.oh, na.rm = T),
avg.o.side = mean(ln.o.side, na.rm = T),
sd.o.side = sd(ln.o.side, na.rm = T),
avg.c.side = mean(ln.c.side, na.rm = T),
sd.c.side = sd(ln.c.side, na.rm = T)) %>%
as.data.frame()
mean_by_formation_colony
G_matrix_NKLS = Gmat[[1]] # The G matrix estimated for sample/formation 1
G_matrix_NKBS = Gmat[[2]] # The G matrix estimated for sample/formation 2
G_matrix_tewk = Gmat[[3]] # The G matrix estimated for sample/formation 3
G_matrix_wai = Gmat[[4]] # The G matrix estimated for sample/formation 4
G_matrix_uki = Gmat[[5]] # The G matrix estimated for sample/formation 5
G_matrix_tai = Gmat[[6]] # The G matrix estimated for sample/formation 6
G_matrix_SHCSBSB = Gmat[[7]] # The G matrix estimated for sample/formation 7
### Generate 10,000 selection gradients in random directions in the n-dimensional space
n_dimensions <- 8 # number of traits in G matrix
Beta <- randomBeta(10000, n_dimensions)
# Compute the mean, minimum and maximum evolvability (e_mean, e_min, e_max) for a G matrix based on 10,000 random selection gradients
X_t1 <- evolvabilityBeta(as.matrix(G_matrix_NKLS), Beta)
sumX_t1 <- summary(X_t1) #provides you with info on mean, minimum and maximum evolvability  (e_mean, e_min, e_max) and conditional evolvability  (c_mean, c_min, c_max) for a given G matrix
X_t1
str(X_t1 )
help("evolvabilityBeta")
sumX_t1
Beta
head(Beeta)
head(Beta)
Beta <- randomBeta(10000, n_dimensions)
View(Beta)
G <- matrix(c(1, 1, 0, 1, 2, 2, 0, 2, 3), ncol = 3) / 10
Beta2 <- randomBeta(5, 3)
X <- evolvabilityBeta(G, Beta2)
summary(X)
### The evolvability in the direction of divergence from sample/formation 1 to sample/formation 2
#observed_evolvability_in_direction_of_change<-t(evolved_difference_unit_length)%*%as.matrix(G_matrix_1)%*%evolved_difference_unit_length
observed_evolvability_in_direction_of_change_t1 <- t(evolved_difference_unit_length_t1)%*%as.matrix(G_matrix_NKLS)%*%evolved_difference_unit_length_t1
